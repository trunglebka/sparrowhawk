// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: items.proto

#include "items.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_semiotic_5fclasses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Abbreviation_semiotic_5fclasses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_semiotic_5fclasses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cardinal_semiotic_5fclasses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_semiotic_5fclasses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Connector_semiotic_5fclasses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_semiotic_5fclasses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Date_semiotic_5fclasses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_semiotic_5fclasses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal_semiotic_5fclasses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_semiotic_5fclasses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Electronic_semiotic_5fclasses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_semiotic_5fclasses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fraction_semiotic_5fclasses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_items_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LinguisticStructure_items_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_links_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Links_links_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_semiotic_5fclasses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Measure_semiotic_5fclasses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_semiotic_5fclasses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Money_semiotic_5fclasses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_semiotic_5fclasses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ordinal_semiotic_5fclasses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_semiotic_5fclasses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Telephone_semiotic_5fclasses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_semiotic_5fclasses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_semiotic_5fclasses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_items_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_Token_items_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_items_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Word_items_2eproto;
namespace speech {
namespace sparrowhawk {
class TokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Token> _instance;
} _Token_default_instance_;
class WordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Word> _instance;
} _Word_default_instance_;
class LinguisticStructureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinguisticStructure> _instance;
} _LinguisticStructure_default_instance_;
class UtteranceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Utterance> _instance;
} _Utterance_default_instance_;
}  // namespace sparrowhawk
}  // namespace speech
static void InitDefaultsscc_info_LinguisticStructure_items_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_LinguisticStructure_default_instance_;
    new (ptr) ::speech::sparrowhawk::LinguisticStructure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LinguisticStructure_items_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LinguisticStructure_items_2eproto}, {
      &scc_info_Token_items_2eproto.base,
      &scc_info_Word_items_2eproto.base,}};

static void InitDefaultsscc_info_Token_items_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_Token_default_instance_;
    new (ptr) ::speech::sparrowhawk::Token();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_Token_items_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 13, 0, InitDefaultsscc_info_Token_items_2eproto}, {
      &scc_info_Links_links_2eproto.base,
      &scc_info_Cardinal_semiotic_5fclasses_2eproto.base,
      &scc_info_Ordinal_semiotic_5fclasses_2eproto.base,
      &scc_info_Decimal_semiotic_5fclasses_2eproto.base,
      &scc_info_Fraction_semiotic_5fclasses_2eproto.base,
      &scc_info_Time_semiotic_5fclasses_2eproto.base,
      &scc_info_Measure_semiotic_5fclasses_2eproto.base,
      &scc_info_Date_semiotic_5fclasses_2eproto.base,
      &scc_info_Telephone_semiotic_5fclasses_2eproto.base,
      &scc_info_Money_semiotic_5fclasses_2eproto.base,
      &scc_info_Electronic_semiotic_5fclasses_2eproto.base,
      &scc_info_Connector_semiotic_5fclasses_2eproto.base,
      &scc_info_Abbreviation_semiotic_5fclasses_2eproto.base,}};

static void InitDefaultsscc_info_Utterance_items_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_Utterance_default_instance_;
    new (ptr) ::speech::sparrowhawk::Utterance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Utterance_items_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Utterance_items_2eproto}, {
      &scc_info_LinguisticStructure_items_2eproto.base,}};

static void InitDefaultsscc_info_Word_items_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_Word_default_instance_;
    new (ptr) ::speech::sparrowhawk::Word();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Word_items_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Word_items_2eproto}, {
      &scc_info_Links_links_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_items_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_items_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_items_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_items_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, links_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, start_index_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, end_index_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, name_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, type_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, wordid_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, spelling_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, phrase_break_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, pause_duration_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, pause_length_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, spelling_with_stress_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, skip_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, next_space_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, cardinal_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, ordinal_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, digit_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, decimal_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, fraction_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, time_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, measure_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, percent_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, date_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, telephone_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, money_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, electronic_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, verbatim_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, letters_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, connector_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, abbreviation_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, first_daughter_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Token, last_daughter_),
  7,
  21,
  22,
  0,
  30,
  1,
  2,
  25,
  23,
  24,
  3,
  26,
  27,
  8,
  9,
  4,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  5,
  6,
  19,
  20,
  28,
  29,
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Word, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Word, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Word, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Word, links_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Word, id_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Word, spelling_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Word, pause_length_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Word, precedes_pause_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Word, parent_),
  2,
  0,
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::LinguisticStructure, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::LinguisticStructure, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::LinguisticStructure, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::LinguisticStructure, id_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::LinguisticStructure, input_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::LinguisticStructure, tokens_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::LinguisticStructure, words_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Utterance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Utterance, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Utterance, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Utterance, id_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Utterance, filename_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Utterance, sentence_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Utterance, original_sentence_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Utterance, segmenter_output_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Utterance, linguistic_),
  4,
  0,
  1,
  2,
  ~0u,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 36, sizeof(::speech::sparrowhawk::Token)},
  { 67, 78, sizeof(::speech::sparrowhawk::Word)},
  { 84, 93, sizeof(::speech::sparrowhawk::LinguisticStructure)},
  { 97, 108, sizeof(::speech::sparrowhawk::Utterance)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_Token_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_Word_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_LinguisticStructure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_Utterance_default_instance_),
};

const char descriptor_table_protodef_items_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013items.proto\022\022speech.sparrowhawk\032\013links"
  ".proto\032\026semiotic_classes.proto\"\335\t\n\005Token"
  "\022(\n\005links\030\001 \001(\0132\031.speech.sparrowhawk.Lin"
  "ks\022\023\n\013start_index\030\002 \001(\r\022\021\n\tend_index\030\003 \001"
  "(\r\022\014\n\004name\030\004 \001(\t\022,\n\004type\030\005 \001(\0162\036.speech."
  "sparrowhawk.Token.Type\022\016\n\006wordid\030\006 \001(\t\022\020"
  "\n\010spelling\030\007 \001(\t\022\024\n\014phrase_break\030\010 \001(\010\022\026"
  "\n\016pause_duration\030\t \001(\002\022G\n\014pause_length\030\n"
  " \001(\0162%.speech.sparrowhawk.Token.PauseLen"
  "gth:\nPAUSE_NONE\022\034\n\024spelling_with_stress\030"
  "\013 \001(\t\022\014\n\004skip\030\014 \001(\010\022\022\n\nnext_space\030\r \001(\010\022"
  ".\n\010cardinal\030\016 \001(\0132\034.speech.sparrowhawk.C"
  "ardinal\022,\n\007ordinal\030\017 \001(\0132\033.speech.sparro"
  "whawk.Ordinal\022\r\n\005digit\030\020 \001(\t\022,\n\007decimal\030"
  "\021 \001(\0132\033.speech.sparrowhawk.Decimal\022.\n\010fr"
  "action\030\022 \001(\0132\034.speech.sparrowhawk.Fracti"
  "on\022&\n\004time\030\023 \001(\0132\030.speech.sparrowhawk.Ti"
  "me\022,\n\007measure\030\024 \001(\0132\033.speech.sparrowhawk"
  ".Measure\022,\n\007percent\030\025 \001(\0132\033.speech.sparr"
  "owhawk.Decimal\022&\n\004date\030\026 \001(\0132\030.speech.sp"
  "arrowhawk.Date\0220\n\ttelephone\030\027 \001(\0132\035.spee"
  "ch.sparrowhawk.Telephone\022(\n\005money\030\030 \001(\0132"
  "\031.speech.sparrowhawk.Money\0222\n\nelectronic"
  "\030\031 \001(\0132\036.speech.sparrowhawk.Electronic\022\020"
  "\n\010verbatim\030\032 \001(\t\022\017\n\007letters\030\033 \001(\t\0220\n\tcon"
  "nector\030\034 \001(\0132\035.speech.sparrowhawk.Connec"
  "tor\0226\n\014abbreviation\030\035 \001(\0132 .speech.sparr"
  "owhawk.Abbreviation\022\026\n\016first_daughter\030\036 "
  "\001(\005\022\025\n\rlast_daughter\030\037 \001(\005\"M\n\004Type\022\010\n\004WO"
  "RD\020\001\022\022\n\016SEMIOTIC_CLASS\020\002\022\t\n\005PUNCT\020\003\022\034\n\030W"
  "ORD_NEEDS_VERBALIZATION\020\004\"P\n\013PauseLength"
  "\022\016\n\nPAUSE_NONE\020\000\022\017\n\013PAUSE_SHORT\020\001\022\020\n\014PAU"
  "SE_MEDIUM\020\002\022\016\n\nPAUSE_LONG\020\003*\t\010\350\007\020\200\200\200\200\002\"\227"
  "\001\n\004Word\022(\n\005links\030\001 \001(\0132\031.speech.sparrowh"
  "awk.Links\022\n\n\002id\030\002 \001(\t\022\020\n\010spelling\030\003 \001(\t\022"
  "\024\n\014pause_length\030\004 \001(\002\022\026\n\016precedes_pause\030"
  "\005 \001(\010\022\016\n\006parent\030\006 \001(\005*\t\010\350\007\020\200\200\200\200\002\"\217\001\n\023Lin"
  "guisticStructure\022\n\n\002id\030\001 \001(\003\022\r\n\005input\030\002 "
  "\001(\t\022)\n\006tokens\030\003 \003(\0132\031.speech.sparrowhawk"
  ".Token\022\'\n\005words\030\004 \003(\0132\030.speech.sparrowha"
  "wk.Word*\t\010\350\007\020\200\200\200\200\002\"\270\001\n\tUtterance\022\n\n\002id\030\001"
  " \001(\004\022\020\n\010filename\030\002 \001(\t\022\020\n\010sentence\030\003 \001(\t"
  "\022\031\n\021original_sentence\030\004 \001(\t\022\030\n\020segmenter"
  "_output\030\005 \003(\t\022;\n\nlinguistic\030\006 \001(\0132\'.spee"
  "ch.sparrowhawk.LinguisticStructure*\t\010\350\007\020"
  "\200\200\200\200\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_items_2eproto_deps[2] = {
  &::descriptor_table_links_2eproto,
  &::descriptor_table_semiotic_5fclasses_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_items_2eproto_sccs[4] = {
  &scc_info_LinguisticStructure_items_2eproto.base,
  &scc_info_Token_items_2eproto.base,
  &scc_info_Utterance_items_2eproto.base,
  &scc_info_Word_items_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_items_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_items_2eproto = {
  false, false, descriptor_table_protodef_items_2eproto, "items.proto", 1805,
  &descriptor_table_items_2eproto_once, descriptor_table_items_2eproto_sccs, descriptor_table_items_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_items_2eproto::offsets,
  file_level_metadata_items_2eproto, 4, file_level_enum_descriptors_items_2eproto, file_level_service_descriptors_items_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_items_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_items_2eproto)), true);
namespace speech {
namespace sparrowhawk {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Token_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_items_2eproto);
  return file_level_enum_descriptors_items_2eproto[0];
}
bool Token_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Token_Type Token::WORD;
constexpr Token_Type Token::SEMIOTIC_CLASS;
constexpr Token_Type Token::PUNCT;
constexpr Token_Type Token::WORD_NEEDS_VERBALIZATION;
constexpr Token_Type Token::Type_MIN;
constexpr Token_Type Token::Type_MAX;
constexpr int Token::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Token_PauseLength_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_items_2eproto);
  return file_level_enum_descriptors_items_2eproto[1];
}
bool Token_PauseLength_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Token_PauseLength Token::PAUSE_NONE;
constexpr Token_PauseLength Token::PAUSE_SHORT;
constexpr Token_PauseLength Token::PAUSE_MEDIUM;
constexpr Token_PauseLength Token::PAUSE_LONG;
constexpr Token_PauseLength Token::PauseLength_MIN;
constexpr Token_PauseLength Token::PauseLength_MAX;
constexpr int Token::PauseLength_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Token::_Internal {
 public:
  using HasBits = decltype(std::declval<Token>()._has_bits_);
  static const ::speech::sparrowhawk::Links& links(const Token* msg);
  static void set_has_links(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_start_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_end_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_wordid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_spelling(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_phrase_break(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_pause_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_pause_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_spelling_with_stress(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_skip(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_next_space(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::speech::sparrowhawk::Cardinal& cardinal(const Token* msg);
  static void set_has_cardinal(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::speech::sparrowhawk::Ordinal& ordinal(const Token* msg);
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_digit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::speech::sparrowhawk::Decimal& decimal(const Token* msg);
  static void set_has_decimal(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::speech::sparrowhawk::Fraction& fraction(const Token* msg);
  static void set_has_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::speech::sparrowhawk::Time& time(const Token* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::speech::sparrowhawk::Measure& measure(const Token* msg);
  static void set_has_measure(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::speech::sparrowhawk::Decimal& percent(const Token* msg);
  static void set_has_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::speech::sparrowhawk::Date& date(const Token* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::speech::sparrowhawk::Telephone& telephone(const Token* msg);
  static void set_has_telephone(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::speech::sparrowhawk::Money& money(const Token* msg);
  static void set_has_money(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::speech::sparrowhawk::Electronic& electronic(const Token* msg);
  static void set_has_electronic(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_verbatim(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_letters(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::speech::sparrowhawk::Connector& connector(const Token* msg);
  static void set_has_connector(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::speech::sparrowhawk::Abbreviation& abbreviation(const Token* msg);
  static void set_has_abbreviation(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_first_daughter(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_last_daughter(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

const ::speech::sparrowhawk::Links&
Token::_Internal::links(const Token* msg) {
  return *msg->links_;
}
const ::speech::sparrowhawk::Cardinal&
Token::_Internal::cardinal(const Token* msg) {
  return *msg->cardinal_;
}
const ::speech::sparrowhawk::Ordinal&
Token::_Internal::ordinal(const Token* msg) {
  return *msg->ordinal_;
}
const ::speech::sparrowhawk::Decimal&
Token::_Internal::decimal(const Token* msg) {
  return *msg->decimal_;
}
const ::speech::sparrowhawk::Fraction&
Token::_Internal::fraction(const Token* msg) {
  return *msg->fraction_;
}
const ::speech::sparrowhawk::Time&
Token::_Internal::time(const Token* msg) {
  return *msg->time_;
}
const ::speech::sparrowhawk::Measure&
Token::_Internal::measure(const Token* msg) {
  return *msg->measure_;
}
const ::speech::sparrowhawk::Decimal&
Token::_Internal::percent(const Token* msg) {
  return *msg->percent_;
}
const ::speech::sparrowhawk::Date&
Token::_Internal::date(const Token* msg) {
  return *msg->date_;
}
const ::speech::sparrowhawk::Telephone&
Token::_Internal::telephone(const Token* msg) {
  return *msg->telephone_;
}
const ::speech::sparrowhawk::Money&
Token::_Internal::money(const Token* msg) {
  return *msg->money_;
}
const ::speech::sparrowhawk::Electronic&
Token::_Internal::electronic(const Token* msg) {
  return *msg->electronic_;
}
const ::speech::sparrowhawk::Connector&
Token::_Internal::connector(const Token* msg) {
  return *msg->connector_;
}
const ::speech::sparrowhawk::Abbreviation&
Token::_Internal::abbreviation(const Token* msg) {
  return *msg->abbreviation_;
}
void Token::clear_links() {
  if (links_ != nullptr) links_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void Token::clear_cardinal() {
  if (cardinal_ != nullptr) cardinal_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void Token::clear_ordinal() {
  if (ordinal_ != nullptr) ordinal_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void Token::clear_decimal() {
  if (decimal_ != nullptr) decimal_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void Token::clear_fraction() {
  if (fraction_ != nullptr) fraction_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void Token::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void Token::clear_measure() {
  if (measure_ != nullptr) measure_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void Token::clear_percent() {
  if (percent_ != nullptr) percent_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void Token::clear_date() {
  if (date_ != nullptr) date_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void Token::clear_telephone() {
  if (telephone_ != nullptr) telephone_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void Token::clear_money() {
  if (money_ != nullptr) money_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void Token::clear_electronic() {
  if (electronic_ != nullptr) electronic_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void Token::clear_connector() {
  if (connector_ != nullptr) connector_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void Token::clear_abbreviation() {
  if (abbreviation_ != nullptr) abbreviation_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
Token::Token(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.Token)
}
Token::Token(const Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  wordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_wordid()) {
    wordid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wordid(), 
      GetArena());
  }
  spelling_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_spelling()) {
    spelling_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spelling(), 
      GetArena());
  }
  spelling_with_stress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_spelling_with_stress()) {
    spelling_with_stress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spelling_with_stress(), 
      GetArena());
  }
  digit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_digit()) {
    digit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digit(), 
      GetArena());
  }
  verbatim_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_verbatim()) {
    verbatim_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_verbatim(), 
      GetArena());
  }
  letters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_letters()) {
    letters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_letters(), 
      GetArena());
  }
  if (from._internal_has_links()) {
    links_ = new ::speech::sparrowhawk::Links(*from.links_);
  } else {
    links_ = nullptr;
  }
  if (from._internal_has_cardinal()) {
    cardinal_ = new ::speech::sparrowhawk::Cardinal(*from.cardinal_);
  } else {
    cardinal_ = nullptr;
  }
  if (from._internal_has_ordinal()) {
    ordinal_ = new ::speech::sparrowhawk::Ordinal(*from.ordinal_);
  } else {
    ordinal_ = nullptr;
  }
  if (from._internal_has_decimal()) {
    decimal_ = new ::speech::sparrowhawk::Decimal(*from.decimal_);
  } else {
    decimal_ = nullptr;
  }
  if (from._internal_has_fraction()) {
    fraction_ = new ::speech::sparrowhawk::Fraction(*from.fraction_);
  } else {
    fraction_ = nullptr;
  }
  if (from._internal_has_time()) {
    time_ = new ::speech::sparrowhawk::Time(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_measure()) {
    measure_ = new ::speech::sparrowhawk::Measure(*from.measure_);
  } else {
    measure_ = nullptr;
  }
  if (from._internal_has_percent()) {
    percent_ = new ::speech::sparrowhawk::Decimal(*from.percent_);
  } else {
    percent_ = nullptr;
  }
  if (from._internal_has_date()) {
    date_ = new ::speech::sparrowhawk::Date(*from.date_);
  } else {
    date_ = nullptr;
  }
  if (from._internal_has_telephone()) {
    telephone_ = new ::speech::sparrowhawk::Telephone(*from.telephone_);
  } else {
    telephone_ = nullptr;
  }
  if (from._internal_has_money()) {
    money_ = new ::speech::sparrowhawk::Money(*from.money_);
  } else {
    money_ = nullptr;
  }
  if (from._internal_has_electronic()) {
    electronic_ = new ::speech::sparrowhawk::Electronic(*from.electronic_);
  } else {
    electronic_ = nullptr;
  }
  if (from._internal_has_connector()) {
    connector_ = new ::speech::sparrowhawk::Connector(*from.connector_);
  } else {
    connector_ = nullptr;
  }
  if (from._internal_has_abbreviation()) {
    abbreviation_ = new ::speech::sparrowhawk::Abbreviation(*from.abbreviation_);
  } else {
    abbreviation_ = nullptr;
  }
  ::memcpy(&start_index_, &from.start_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Token)
}

void Token::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Token_items_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wordid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spelling_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spelling_with_stress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbatim_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  letters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&links_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&last_daughter_) -
      reinterpret_cast<char*>(&links_)) + sizeof(last_daughter_));
  type_ = 1;
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Token)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Token::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wordid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spelling_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spelling_with_stress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbatim_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  letters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete links_;
  if (this != internal_default_instance()) delete cardinal_;
  if (this != internal_default_instance()) delete ordinal_;
  if (this != internal_default_instance()) delete decimal_;
  if (this != internal_default_instance()) delete fraction_;
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete measure_;
  if (this != internal_default_instance()) delete percent_;
  if (this != internal_default_instance()) delete date_;
  if (this != internal_default_instance()) delete telephone_;
  if (this != internal_default_instance()) delete money_;
  if (this != internal_default_instance()) delete electronic_;
  if (this != internal_default_instance()) delete connector_;
  if (this != internal_default_instance()) delete abbreviation_;
}

void Token::ArenaDtor(void* object) {
  Token* _this = reinterpret_cast< Token* >(object);
  (void)_this;
}
void Token::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Token::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Token& Token::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Token_items_2eproto.base);
  return *internal_default_instance();
}


void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      wordid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      spelling_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      spelling_with_stress_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      digit_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      verbatim_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      letters_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(links_ != nullptr);
      links_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(cardinal_ != nullptr);
      cardinal_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(ordinal_ != nullptr);
      ordinal_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(decimal_ != nullptr);
      decimal_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(fraction_ != nullptr);
      fraction_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(time_ != nullptr);
      time_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(measure_ != nullptr);
      measure_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(percent_ != nullptr);
      percent_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(date_ != nullptr);
      date_->Clear();
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(telephone_ != nullptr);
      telephone_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(money_ != nullptr);
      money_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(electronic_ != nullptr);
      electronic_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(connector_ != nullptr);
      connector_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(abbreviation_ != nullptr);
      abbreviation_->Clear();
    }
  }
  if (cached_has_bits & 0x00e00000u) {
    ::memset(&start_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pause_duration_) -
        reinterpret_cast<char*>(&start_index_)) + sizeof(pause_duration_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&pause_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_daughter_) -
        reinterpret_cast<char*>(&pause_length_)) + sizeof(last_daughter_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Token::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .speech.sparrowhawk.Links links = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_links(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_start_index(&has_bits);
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 end_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_end_index(&has_bits);
          end_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Token.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.Token.Type type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::speech::sparrowhawk::Token_Type_IsValid(val))) {
            _internal_set_type(static_cast<::speech::sparrowhawk::Token_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string wordid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_wordid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Token.wordid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string spelling = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_spelling();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Token.spelling");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool phrase_break = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_phrase_break(&has_bits);
          phrase_break_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pause_duration = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_pause_duration(&has_bits);
          pause_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.Token.PauseLength pause_length = 10 [default = PAUSE_NONE];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::speech::sparrowhawk::Token_PauseLength_IsValid(val))) {
            _internal_set_pause_length(static_cast<::speech::sparrowhawk::Token_PauseLength>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string spelling_with_stress = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_spelling_with_stress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Token.spelling_with_stress");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool skip = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_skip(&has_bits);
          skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool next_space = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_next_space(&has_bits);
          next_space_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.Cardinal cardinal = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardinal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.Ordinal ordinal = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ordinal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string digit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_digit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Token.digit");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.Decimal decimal = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_decimal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.Fraction fraction = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_fraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.Time time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.Measure measure = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_measure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.Decimal percent = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_percent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.Date date = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.Telephone telephone = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_telephone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.Money money = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_money(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.Electronic electronic = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_electronic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string verbatim = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_verbatim();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Token.verbatim");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string letters = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_letters();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Token.letters");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.Connector connector = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_connector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.Abbreviation abbreviation = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_abbreviation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 first_daughter = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_first_daughter(&has_bits);
          first_daughter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_daughter = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_last_daughter(&has_bits);
          last_daughter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Token::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Token)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .speech.sparrowhawk.Links links = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::links(this), target, stream);
  }

  // optional uint32 start_index = 2;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start_index(), target);
  }

  // optional uint32 end_index = 3;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_end_index(), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // optional .speech.sparrowhawk.Token.Type type = 5;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // optional string wordid = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_wordid().data(), static_cast<int>(this->_internal_wordid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.wordid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_wordid(), target);
  }

  // optional string spelling = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_spelling().data(), static_cast<int>(this->_internal_spelling().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.spelling");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_spelling(), target);
  }

  // optional bool phrase_break = 8;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_phrase_break(), target);
  }

  // optional float pause_duration = 9;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_pause_duration(), target);
  }

  // optional .speech.sparrowhawk.Token.PauseLength pause_length = 10 [default = PAUSE_NONE];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_pause_length(), target);
  }

  // optional string spelling_with_stress = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_spelling_with_stress().data(), static_cast<int>(this->_internal_spelling_with_stress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.spelling_with_stress");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_spelling_with_stress(), target);
  }

  // optional bool skip = 12;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_skip(), target);
  }

  // optional bool next_space = 13;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_next_space(), target);
  }

  // optional .speech.sparrowhawk.Cardinal cardinal = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::cardinal(this), target, stream);
  }

  // optional .speech.sparrowhawk.Ordinal ordinal = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::ordinal(this), target, stream);
  }

  // optional string digit = 16;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_digit().data(), static_cast<int>(this->_internal_digit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.digit");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_digit(), target);
  }

  // optional .speech.sparrowhawk.Decimal decimal = 17;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::decimal(this), target, stream);
  }

  // optional .speech.sparrowhawk.Fraction fraction = 18;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::fraction(this), target, stream);
  }

  // optional .speech.sparrowhawk.Time time = 19;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::time(this), target, stream);
  }

  // optional .speech.sparrowhawk.Measure measure = 20;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::measure(this), target, stream);
  }

  // optional .speech.sparrowhawk.Decimal percent = 21;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::percent(this), target, stream);
  }

  // optional .speech.sparrowhawk.Date date = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::date(this), target, stream);
  }

  // optional .speech.sparrowhawk.Telephone telephone = 23;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::telephone(this), target, stream);
  }

  // optional .speech.sparrowhawk.Money money = 24;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::money(this), target, stream);
  }

  // optional .speech.sparrowhawk.Electronic electronic = 25;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::electronic(this), target, stream);
  }

  // optional string verbatim = 26;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_verbatim().data(), static_cast<int>(this->_internal_verbatim().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.verbatim");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_verbatim(), target);
  }

  // optional string letters = 27;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_letters().data(), static_cast<int>(this->_internal_letters().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.letters");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_letters(), target);
  }

  // optional .speech.sparrowhawk.Connector connector = 28;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::connector(this), target, stream);
  }

  // optional .speech.sparrowhawk.Abbreviation abbreviation = 29;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::abbreviation(this), target, stream);
  }

  // optional int32 first_daughter = 30;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_first_daughter(), target);
  }

  // optional int32 last_daughter = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_last_daughter(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_._InternalSerialize(
      1000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Token)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string wordid = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wordid());
    }

    // optional string spelling = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_spelling());
    }

    // optional string spelling_with_stress = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_spelling_with_stress());
    }

    // optional string digit = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_digit());
    }

    // optional string verbatim = 26;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verbatim());
    }

    // optional string letters = 27;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_letters());
    }

    // optional .speech.sparrowhawk.Links links = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *links_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .speech.sparrowhawk.Cardinal cardinal = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cardinal_);
    }

    // optional .speech.sparrowhawk.Ordinal ordinal = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ordinal_);
    }

    // optional .speech.sparrowhawk.Decimal decimal = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *decimal_);
    }

    // optional .speech.sparrowhawk.Fraction fraction = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fraction_);
    }

    // optional .speech.sparrowhawk.Time time = 19;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_);
    }

    // optional .speech.sparrowhawk.Measure measure = 20;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *measure_);
    }

    // optional .speech.sparrowhawk.Decimal percent = 21;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *percent_);
    }

    // optional .speech.sparrowhawk.Date date = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .speech.sparrowhawk.Telephone telephone = 23;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *telephone_);
    }

    // optional .speech.sparrowhawk.Money money = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *money_);
    }

    // optional .speech.sparrowhawk.Electronic electronic = 25;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *electronic_);
    }

    // optional .speech.sparrowhawk.Connector connector = 28;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connector_);
    }

    // optional .speech.sparrowhawk.Abbreviation abbreviation = 29;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *abbreviation_);
    }

    // optional uint32 start_index = 2;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_index());
    }

    // optional uint32 end_index = 3;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_end_index());
    }

    // optional float pause_duration = 9;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional .speech.sparrowhawk.Token.PauseLength pause_length = 10 [default = PAUSE_NONE];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pause_length());
    }

    // optional bool phrase_break = 8;
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 1;
    }

    // optional bool skip = 12;
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 1;
    }

    // optional bool next_space = 13;
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 + 1;
    }

    // optional int32 first_daughter = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_first_daughter());
    }

    // optional int32 last_daughter = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_last_daughter());
    }

    // optional .speech.sparrowhawk.Token.Type type = 5;
    if (cached_has_bits & 0x40000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Token::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Token)
  GOOGLE_DCHECK_NE(&from, this);
  const Token* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Token>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Token)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Token)
    MergeFrom(*source);
  }
}

void Token::MergeFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Token)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_wordid(from._internal_wordid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_spelling(from._internal_spelling());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_spelling_with_stress(from._internal_spelling_with_stress());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_digit(from._internal_digit());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_verbatim(from._internal_verbatim());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_letters(from._internal_letters());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_links()->::speech::sparrowhawk::Links::MergeFrom(from._internal_links());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_cardinal()->::speech::sparrowhawk::Cardinal::MergeFrom(from._internal_cardinal());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_ordinal()->::speech::sparrowhawk::Ordinal::MergeFrom(from._internal_ordinal());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_decimal()->::speech::sparrowhawk::Decimal::MergeFrom(from._internal_decimal());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_fraction()->::speech::sparrowhawk::Fraction::MergeFrom(from._internal_fraction());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_time()->::speech::sparrowhawk::Time::MergeFrom(from._internal_time());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_measure()->::speech::sparrowhawk::Measure::MergeFrom(from._internal_measure());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_percent()->::speech::sparrowhawk::Decimal::MergeFrom(from._internal_percent());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_date()->::speech::sparrowhawk::Date::MergeFrom(from._internal_date());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_telephone()->::speech::sparrowhawk::Telephone::MergeFrom(from._internal_telephone());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_money()->::speech::sparrowhawk::Money::MergeFrom(from._internal_money());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_electronic()->::speech::sparrowhawk::Electronic::MergeFrom(from._internal_electronic());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_connector()->::speech::sparrowhawk::Connector::MergeFrom(from._internal_connector());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_abbreviation()->::speech::sparrowhawk::Abbreviation::MergeFrom(from._internal_abbreviation());
    }
    if (cached_has_bits & 0x00200000u) {
      start_index_ = from.start_index_;
    }
    if (cached_has_bits & 0x00400000u) {
      end_index_ = from.end_index_;
    }
    if (cached_has_bits & 0x00800000u) {
      pause_duration_ = from.pause_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      pause_length_ = from.pause_length_;
    }
    if (cached_has_bits & 0x02000000u) {
      phrase_break_ = from.phrase_break_;
    }
    if (cached_has_bits & 0x04000000u) {
      skip_ = from.skip_;
    }
    if (cached_has_bits & 0x08000000u) {
      next_space_ = from.next_space_;
    }
    if (cached_has_bits & 0x10000000u) {
      first_daughter_ = from.first_daughter_;
    }
    if (cached_has_bits & 0x20000000u) {
      last_daughter_ = from.last_daughter_;
    }
    if (cached_has_bits & 0x40000000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Token::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_cardinal()) {
    if (!cardinal_->IsInitialized()) return false;
  }
  if (_internal_has_ordinal()) {
    if (!ordinal_->IsInitialized()) return false;
  }
  if (_internal_has_fraction()) {
    if (!fraction_->IsInitialized()) return false;
  }
  if (_internal_has_measure()) {
    if (!measure_->IsInitialized()) return false;
  }
  if (_internal_has_money()) {
    if (!money_->IsInitialized()) return false;
  }
  if (_internal_has_abbreviation()) {
    if (!abbreviation_->IsInitialized()) return false;
  }
  return true;
}

void Token::InternalSwap(Token* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  wordid_.Swap(&other->wordid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  spelling_.Swap(&other->spelling_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  spelling_with_stress_.Swap(&other->spelling_with_stress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  digit_.Swap(&other->digit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  verbatim_.Swap(&other->verbatim_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  letters_.Swap(&other->letters_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Token, last_daughter_)
      + sizeof(Token::last_daughter_)
      - PROTOBUF_FIELD_OFFSET(Token, links_)>(
          reinterpret_cast<char*>(&links_),
          reinterpret_cast<char*>(&other->links_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Token::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Word::_Internal {
 public:
  using HasBits = decltype(std::declval<Word>()._has_bits_);
  static const ::speech::sparrowhawk::Links& links(const Word* msg);
  static void set_has_links(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_spelling(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pause_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_precedes_pause(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::speech::sparrowhawk::Links&
Word::_Internal::links(const Word* msg) {
  return *msg->links_;
}
void Word::clear_links() {
  if (links_ != nullptr) links_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Word::Word(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.Word)
}
Word::Word(const Word& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  spelling_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_spelling()) {
    spelling_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spelling(), 
      GetArena());
  }
  if (from._internal_has_links()) {
    links_ = new ::speech::sparrowhawk::Links(*from.links_);
  } else {
    links_ = nullptr;
  }
  ::memcpy(&pause_length_, &from.pause_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_) -
    reinterpret_cast<char*>(&pause_length_)) + sizeof(parent_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Word)
}

void Word::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Word_items_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spelling_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&links_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&parent_) -
      reinterpret_cast<char*>(&links_)) + sizeof(parent_));
}

Word::~Word() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Word)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Word::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spelling_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete links_;
}

void Word::ArenaDtor(void* object) {
  Word* _this = reinterpret_cast< Word* >(object);
  (void)_this;
}
void Word::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Word::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Word& Word::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Word_items_2eproto.base);
  return *internal_default_instance();
}


void Word::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Word)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      spelling_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(links_ != nullptr);
      links_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&pause_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parent_) -
        reinterpret_cast<char*>(&pause_length_)) + sizeof(parent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Word::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .speech.sparrowhawk.Links links = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_links(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Word.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string spelling = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_spelling();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Word.spelling");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pause_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_pause_length(&has_bits);
          pause_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool precedes_pause = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_precedes_pause(&has_bits);
          precedes_pause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 parent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_parent(&has_bits);
          parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Word::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Word)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .speech.sparrowhawk.Links links = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::links(this), target, stream);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Word.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // optional string spelling = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_spelling().data(), static_cast<int>(this->_internal_spelling().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Word.spelling");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_spelling(), target);
  }

  // optional float pause_length = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_pause_length(), target);
  }

  // optional bool precedes_pause = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_precedes_pause(), target);
  }

  // optional int32 parent = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_parent(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_._InternalSerialize(
      1000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Word)
  return target;
}

size_t Word::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Word)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string spelling = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_spelling());
    }

    // optional .speech.sparrowhawk.Links links = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *links_);
    }

    // optional float pause_length = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool precedes_pause = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 parent = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_parent());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Word::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Word)
  GOOGLE_DCHECK_NE(&from, this);
  const Word* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Word>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Word)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Word)
    MergeFrom(*source);
  }
}

void Word::MergeFrom(const Word& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Word)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_spelling(from._internal_spelling());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_links()->::speech::sparrowhawk::Links::MergeFrom(from._internal_links());
    }
    if (cached_has_bits & 0x00000008u) {
      pause_length_ = from.pause_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      precedes_pause_ = from.precedes_pause_;
    }
    if (cached_has_bits & 0x00000020u) {
      parent_ = from.parent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Word::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Word)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Word::CopyFrom(const Word& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Word)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Word::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void Word::InternalSwap(Word* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  spelling_.Swap(&other->spelling_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Word, parent_)
      + sizeof(Word::parent_)
      - PROTOBUF_FIELD_OFFSET(Word, links_)>(
          reinterpret_cast<char*>(&links_),
          reinterpret_cast<char*>(&other->links_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Word::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LinguisticStructure::_Internal {
 public:
  using HasBits = decltype(std::declval<LinguisticStructure>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LinguisticStructure::LinguisticStructure(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena),
  tokens_(arena),
  words_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.LinguisticStructure)
}
LinguisticStructure::LinguisticStructure(const LinguisticStructure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tokens_(from.tokens_),
      words_(from.words_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_input()) {
    input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.LinguisticStructure)
}

void LinguisticStructure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinguisticStructure_items_2eproto.base);
  input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

LinguisticStructure::~LinguisticStructure() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.LinguisticStructure)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinguisticStructure::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  input_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LinguisticStructure::ArenaDtor(void* object) {
  LinguisticStructure* _this = reinterpret_cast< LinguisticStructure* >(object);
  (void)_this;
}
void LinguisticStructure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinguisticStructure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinguisticStructure& LinguisticStructure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinguisticStructure_items_2eproto.base);
  return *internal_default_instance();
}


void LinguisticStructure::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.LinguisticStructure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  tokens_.Clear();
  words_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    input_.ClearNonDefaultToEmpty();
  }
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinguisticStructure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_input();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.LinguisticStructure.input");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .speech.sparrowhawk.Token tokens = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .speech.sparrowhawk.Word words = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_words(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinguisticStructure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.LinguisticStructure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // optional string input = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input().data(), static_cast<int>(this->_internal_input().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.LinguisticStructure.input");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input(), target);
  }

  // repeated .speech.sparrowhawk.Token tokens = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tokens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tokens(i), target, stream);
  }

  // repeated .speech.sparrowhawk.Word words = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_words_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_words(i), target, stream);
  }

  // Extension range [1000, 536870912)
  target = _extensions_._InternalSerialize(
      1000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.LinguisticStructure)
  return target;
}

size_t LinguisticStructure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.LinguisticStructure)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speech.sparrowhawk.Token tokens = 3;
  total_size += 1UL * this->_internal_tokens_size();
  for (const auto& msg : this->tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .speech.sparrowhawk.Word words = 4;
  total_size += 1UL * this->_internal_words_size();
  for (const auto& msg : this->words_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string input = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input());
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinguisticStructure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.LinguisticStructure)
  GOOGLE_DCHECK_NE(&from, this);
  const LinguisticStructure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinguisticStructure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.LinguisticStructure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.LinguisticStructure)
    MergeFrom(*source);
  }
}

void LinguisticStructure::MergeFrom(const LinguisticStructure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.LinguisticStructure)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  words_.MergeFrom(from.words_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_input(from._internal_input());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LinguisticStructure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.LinguisticStructure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinguisticStructure::CopyFrom(const LinguisticStructure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.LinguisticStructure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinguisticStructure::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tokens_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(words_)) return false;
  return true;
}

void LinguisticStructure::InternalSwap(LinguisticStructure* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tokens_.InternalSwap(&other->tokens_);
  words_.InternalSwap(&other->words_);
  input_.Swap(&other->input_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinguisticStructure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Utterance::_Internal {
 public:
  using HasBits = decltype(std::declval<Utterance>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sentence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_original_sentence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::speech::sparrowhawk::LinguisticStructure& linguistic(const Utterance* msg);
  static void set_has_linguistic(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::speech::sparrowhawk::LinguisticStructure&
Utterance::_Internal::linguistic(const Utterance* msg) {
  return *msg->linguistic_;
}
Utterance::Utterance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena),
  segmenter_output_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.Utterance)
}
Utterance::Utterance(const Utterance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      segmenter_output_(from.segmenter_output_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  sentence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sentence()) {
    sentence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sentence(), 
      GetArena());
  }
  original_sentence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_original_sentence()) {
    original_sentence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_original_sentence(), 
      GetArena());
  }
  if (from._internal_has_linguistic()) {
    linguistic_ = new ::speech::sparrowhawk::LinguisticStructure(*from.linguistic_);
  } else {
    linguistic_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Utterance)
}

void Utterance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Utterance_items_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sentence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_sentence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&linguistic_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&linguistic_)) + sizeof(id_));
}

Utterance::~Utterance() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Utterance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Utterance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sentence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_sentence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete linguistic_;
}

void Utterance::ArenaDtor(void* object) {
  Utterance* _this = reinterpret_cast< Utterance* >(object);
  (void)_this;
}
void Utterance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Utterance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Utterance& Utterance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Utterance_items_2eproto.base);
  return *internal_default_instance();
}


void Utterance::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Utterance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  segmenter_output_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sentence_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      original_sentence_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(linguistic_ != nullptr);
      linguistic_->Clear();
    }
  }
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Utterance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Utterance.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sentence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sentence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Utterance.sentence");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string original_sentence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_original_sentence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Utterance.original_sentence");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string segmenter_output = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_segmenter_output();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Utterance.segmenter_output");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.LinguisticStructure linguistic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_linguistic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((8000u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Utterance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Utterance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional string filename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Utterance.filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filename(), target);
  }

  // optional string sentence = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sentence().data(), static_cast<int>(this->_internal_sentence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Utterance.sentence");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sentence(), target);
  }

  // optional string original_sentence = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_original_sentence().data(), static_cast<int>(this->_internal_original_sentence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Utterance.original_sentence");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_original_sentence(), target);
  }

  // repeated string segmenter_output = 5;
  for (int i = 0, n = this->_internal_segmenter_output_size(); i < n; i++) {
    const auto& s = this->_internal_segmenter_output(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Utterance.segmenter_output");
    target = stream->WriteString(5, s, target);
  }

  // optional .speech.sparrowhawk.LinguisticStructure linguistic = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::linguistic(this), target, stream);
  }

  // Extension range [1000, 536870912)
  target = _extensions_._InternalSerialize(
      1000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Utterance)
  return target;
}

size_t Utterance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Utterance)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string segmenter_output = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(segmenter_output_.size());
  for (int i = 0, n = segmenter_output_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      segmenter_output_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string filename = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional string sentence = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sentence());
    }

    // optional string original_sentence = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_original_sentence());
    }

    // optional .speech.sparrowhawk.LinguisticStructure linguistic = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linguistic_);
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Utterance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Utterance)
  GOOGLE_DCHECK_NE(&from, this);
  const Utterance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Utterance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Utterance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Utterance)
    MergeFrom(*source);
  }
}

void Utterance::MergeFrom(const Utterance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Utterance)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segmenter_output_.MergeFrom(from.segmenter_output_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sentence(from._internal_sentence());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_original_sentence(from._internal_original_sentence());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_linguistic()->::speech::sparrowhawk::LinguisticStructure::MergeFrom(from._internal_linguistic());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Utterance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Utterance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Utterance::CopyFrom(const Utterance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Utterance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Utterance::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_linguistic()) {
    if (!linguistic_->IsInitialized()) return false;
  }
  return true;
}

void Utterance::InternalSwap(Utterance* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  segmenter_output_.InternalSwap(&other->segmenter_output_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sentence_.Swap(&other->sentence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  original_sentence_.Swap(&other->original_sentence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Utterance, id_)
      + sizeof(Utterance::id_)
      - PROTOBUF_FIELD_OFFSET(Utterance, linguistic_)>(
          reinterpret_cast<char*>(&linguistic_),
          reinterpret_cast<char*>(&other->linguistic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Utterance::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sparrowhawk
}  // namespace speech
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::Token* Arena::CreateMaybeMessage< ::speech::sparrowhawk::Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::Token >(arena);
}
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::Word* Arena::CreateMaybeMessage< ::speech::sparrowhawk::Word >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::Word >(arena);
}
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::LinguisticStructure* Arena::CreateMaybeMessage< ::speech::sparrowhawk::LinguisticStructure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::LinguisticStructure >(arena);
}
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::Utterance* Arena::CreateMaybeMessage< ::speech::sparrowhawk::Utterance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::Utterance >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

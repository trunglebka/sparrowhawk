// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rule_order.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rule_5forder_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rule_5forder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rule_5forder_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rule_5forder_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rule_5forder_2eproto;
namespace speech {
namespace sparrowhawk {
class Grammar;
class GrammarDefaultTypeInternal;
extern GrammarDefaultTypeInternal _Grammar_default_instance_;
class Rule;
class RuleDefaultTypeInternal;
extern RuleDefaultTypeInternal _Rule_default_instance_;
}  // namespace sparrowhawk
}  // namespace speech
PROTOBUF_NAMESPACE_OPEN
template<> ::speech::sparrowhawk::Grammar* Arena::CreateMaybeMessage<::speech::sparrowhawk::Grammar>(Arena*);
template<> ::speech::sparrowhawk::Rule* Arena::CreateMaybeMessage<::speech::sparrowhawk::Rule>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace speech {
namespace sparrowhawk {

// ===================================================================

class Rule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speech.sparrowhawk.Rule) */ {
 public:
  inline Rule() : Rule(nullptr) {}
  virtual ~Rule();

  Rule(const Rule& from);
  Rule(Rule&& from) noexcept
    : Rule() {
    *this = ::std::move(from);
  }

  inline Rule& operator=(const Rule& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rule& operator=(Rule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rule& default_instance();

  static inline const Rule* internal_default_instance() {
    return reinterpret_cast<const Rule*>(
               &_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Rule& a, Rule& b) {
    a.Swap(&b);
  }
  inline void Swap(Rule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rule* New() const final {
    return CreateMaybeMessage<Rule>(nullptr);
  }

  Rule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rule& from);
  void MergeFrom(const Rule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speech.sparrowhawk.Rule";
  }
  protected:
  explicit Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rule_5forder_2eproto);
    return ::descriptor_table_rule_5forder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainFieldNumber = 1,
    kParensFieldNumber = 2,
    kAssignmentsFieldNumber = 3,
    kRedupFieldNumber = 4,
  };
  // required string main = 1;
  bool has_main() const;
  private:
  bool _internal_has_main() const;
  public:
  void clear_main();
  const std::string& main() const;
  void set_main(const std::string& value);
  void set_main(std::string&& value);
  void set_main(const char* value);
  void set_main(const char* value, size_t size);
  std::string* mutable_main();
  std::string* release_main();
  void set_allocated_main(std::string* main);
  private:
  const std::string& _internal_main() const;
  void _internal_set_main(const std::string& value);
  std::string* _internal_mutable_main();
  public:

  // optional string parens = 2;
  bool has_parens() const;
  private:
  bool _internal_has_parens() const;
  public:
  void clear_parens();
  const std::string& parens() const;
  void set_parens(const std::string& value);
  void set_parens(std::string&& value);
  void set_parens(const char* value);
  void set_parens(const char* value, size_t size);
  std::string* mutable_parens();
  std::string* release_parens();
  void set_allocated_parens(std::string* parens);
  private:
  const std::string& _internal_parens() const;
  void _internal_set_parens(const std::string& value);
  std::string* _internal_mutable_parens();
  public:

  // optional string assignments = 3;
  bool has_assignments() const;
  private:
  bool _internal_has_assignments() const;
  public:
  void clear_assignments();
  const std::string& assignments() const;
  void set_assignments(const std::string& value);
  void set_assignments(std::string&& value);
  void set_assignments(const char* value);
  void set_assignments(const char* value, size_t size);
  std::string* mutable_assignments();
  std::string* release_assignments();
  void set_allocated_assignments(std::string* assignments);
  private:
  const std::string& _internal_assignments() const;
  void _internal_set_assignments(const std::string& value);
  std::string* _internal_mutable_assignments();
  public:

  // optional string redup = 4;
  bool has_redup() const;
  private:
  bool _internal_has_redup() const;
  public:
  void clear_redup();
  const std::string& redup() const;
  void set_redup(const std::string& value);
  void set_redup(std::string&& value);
  void set_redup(const char* value);
  void set_redup(const char* value, size_t size);
  std::string* mutable_redup();
  std::string* release_redup();
  void set_allocated_redup(std::string* redup);
  private:
  const std::string& _internal_redup() const;
  void _internal_set_redup(const std::string& value);
  std::string* _internal_mutable_redup();
  public:

  // @@protoc_insertion_point(class_scope:speech.sparrowhawk.Rule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parens_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assignments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redup_;
  friend struct ::TableStruct_rule_5forder_2eproto;
};
// -------------------------------------------------------------------

class Grammar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speech.sparrowhawk.Grammar) */ {
 public:
  inline Grammar() : Grammar(nullptr) {}
  virtual ~Grammar();

  Grammar(const Grammar& from);
  Grammar(Grammar&& from) noexcept
    : Grammar() {
    *this = ::std::move(from);
  }

  inline Grammar& operator=(const Grammar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grammar& operator=(Grammar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grammar& default_instance();

  static inline const Grammar* internal_default_instance() {
    return reinterpret_cast<const Grammar*>(
               &_Grammar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Grammar& a, Grammar& b) {
    a.Swap(&b);
  }
  inline void Swap(Grammar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Grammar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grammar* New() const final {
    return CreateMaybeMessage<Grammar>(nullptr);
  }

  Grammar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grammar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grammar& from);
  void MergeFrom(const Grammar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grammar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speech.sparrowhawk.Grammar";
  }
  protected:
  explicit Grammar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rule_5forder_2eproto);
    return ::descriptor_table_rule_5forder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 3,
    kGrammarFileFieldNumber = 1,
    kGrammarNameFieldNumber = 2,
  };
  // repeated .speech.sparrowhawk.Rule rules = 3;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::speech::sparrowhawk::Rule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::Rule >*
      mutable_rules();
  private:
  const ::speech::sparrowhawk::Rule& _internal_rules(int index) const;
  ::speech::sparrowhawk::Rule* _internal_add_rules();
  public:
  const ::speech::sparrowhawk::Rule& rules(int index) const;
  ::speech::sparrowhawk::Rule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::Rule >&
      rules() const;

  // required string grammar_file = 1;
  bool has_grammar_file() const;
  private:
  bool _internal_has_grammar_file() const;
  public:
  void clear_grammar_file();
  const std::string& grammar_file() const;
  void set_grammar_file(const std::string& value);
  void set_grammar_file(std::string&& value);
  void set_grammar_file(const char* value);
  void set_grammar_file(const char* value, size_t size);
  std::string* mutable_grammar_file();
  std::string* release_grammar_file();
  void set_allocated_grammar_file(std::string* grammar_file);
  private:
  const std::string& _internal_grammar_file() const;
  void _internal_set_grammar_file(const std::string& value);
  std::string* _internal_mutable_grammar_file();
  public:

  // required string grammar_name = 2;
  bool has_grammar_name() const;
  private:
  bool _internal_has_grammar_name() const;
  public:
  void clear_grammar_name();
  const std::string& grammar_name() const;
  void set_grammar_name(const std::string& value);
  void set_grammar_name(std::string&& value);
  void set_grammar_name(const char* value);
  void set_grammar_name(const char* value, size_t size);
  std::string* mutable_grammar_name();
  std::string* release_grammar_name();
  void set_allocated_grammar_name(std::string* grammar_name);
  private:
  const std::string& _internal_grammar_name() const;
  void _internal_set_grammar_name(const std::string& value);
  std::string* _internal_mutable_grammar_name();
  public:

  // @@protoc_insertion_point(class_scope:speech.sparrowhawk.Grammar)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::Rule > rules_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grammar_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grammar_name_;
  friend struct ::TableStruct_rule_5forder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Rule

// required string main = 1;
inline bool Rule::_internal_has_main() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Rule::has_main() const {
  return _internal_has_main();
}
inline void Rule::clear_main() {
  main_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Rule::main() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.Rule.main)
  return _internal_main();
}
inline void Rule::set_main(const std::string& value) {
  _internal_set_main(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.Rule.main)
}
inline std::string* Rule::mutable_main() {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.Rule.main)
  return _internal_mutable_main();
}
inline const std::string& Rule::_internal_main() const {
  return main_.Get();
}
inline void Rule::_internal_set_main(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  main_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Rule::set_main(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  main_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.Rule.main)
}
inline void Rule::set_main(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  main_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.Rule.main)
}
inline void Rule::set_main(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  main_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.Rule.main)
}
inline std::string* Rule::_internal_mutable_main() {
  _has_bits_[0] |= 0x00000001u;
  return main_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Rule::release_main() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.Rule.main)
  if (!_internal_has_main()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return main_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rule::set_allocated_main(std::string* main) {
  if (main != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  main_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.Rule.main)
}

// optional string parens = 2;
inline bool Rule::_internal_has_parens() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Rule::has_parens() const {
  return _internal_has_parens();
}
inline void Rule::clear_parens() {
  parens_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Rule::parens() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.Rule.parens)
  return _internal_parens();
}
inline void Rule::set_parens(const std::string& value) {
  _internal_set_parens(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.Rule.parens)
}
inline std::string* Rule::mutable_parens() {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.Rule.parens)
  return _internal_mutable_parens();
}
inline const std::string& Rule::_internal_parens() const {
  return parens_.Get();
}
inline void Rule::_internal_set_parens(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  parens_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Rule::set_parens(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  parens_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.Rule.parens)
}
inline void Rule::set_parens(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  parens_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.Rule.parens)
}
inline void Rule::set_parens(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  parens_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.Rule.parens)
}
inline std::string* Rule::_internal_mutable_parens() {
  _has_bits_[0] |= 0x00000002u;
  return parens_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Rule::release_parens() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.Rule.parens)
  if (!_internal_has_parens()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return parens_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rule::set_allocated_parens(std::string* parens) {
  if (parens != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  parens_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parens,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.Rule.parens)
}

// optional string assignments = 3;
inline bool Rule::_internal_has_assignments() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Rule::has_assignments() const {
  return _internal_has_assignments();
}
inline void Rule::clear_assignments() {
  assignments_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Rule::assignments() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.Rule.assignments)
  return _internal_assignments();
}
inline void Rule::set_assignments(const std::string& value) {
  _internal_set_assignments(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.Rule.assignments)
}
inline std::string* Rule::mutable_assignments() {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.Rule.assignments)
  return _internal_mutable_assignments();
}
inline const std::string& Rule::_internal_assignments() const {
  return assignments_.Get();
}
inline void Rule::_internal_set_assignments(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  assignments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Rule::set_assignments(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  assignments_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.Rule.assignments)
}
inline void Rule::set_assignments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  assignments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.Rule.assignments)
}
inline void Rule::set_assignments(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  assignments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.Rule.assignments)
}
inline std::string* Rule::_internal_mutable_assignments() {
  _has_bits_[0] |= 0x00000004u;
  return assignments_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Rule::release_assignments() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.Rule.assignments)
  if (!_internal_has_assignments()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return assignments_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rule::set_allocated_assignments(std::string* assignments) {
  if (assignments != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  assignments_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assignments,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.Rule.assignments)
}

// optional string redup = 4;
inline bool Rule::_internal_has_redup() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Rule::has_redup() const {
  return _internal_has_redup();
}
inline void Rule::clear_redup() {
  redup_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Rule::redup() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.Rule.redup)
  return _internal_redup();
}
inline void Rule::set_redup(const std::string& value) {
  _internal_set_redup(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.Rule.redup)
}
inline std::string* Rule::mutable_redup() {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.Rule.redup)
  return _internal_mutable_redup();
}
inline const std::string& Rule::_internal_redup() const {
  return redup_.Get();
}
inline void Rule::_internal_set_redup(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  redup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Rule::set_redup(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  redup_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.Rule.redup)
}
inline void Rule::set_redup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  redup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.Rule.redup)
}
inline void Rule::set_redup(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  redup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.Rule.redup)
}
inline std::string* Rule::_internal_mutable_redup() {
  _has_bits_[0] |= 0x00000008u;
  return redup_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Rule::release_redup() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.Rule.redup)
  if (!_internal_has_redup()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return redup_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rule::set_allocated_redup(std::string* redup) {
  if (redup != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  redup_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redup,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.Rule.redup)
}

// -------------------------------------------------------------------

// Grammar

// required string grammar_file = 1;
inline bool Grammar::_internal_has_grammar_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Grammar::has_grammar_file() const {
  return _internal_has_grammar_file();
}
inline void Grammar::clear_grammar_file() {
  grammar_file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Grammar::grammar_file() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.Grammar.grammar_file)
  return _internal_grammar_file();
}
inline void Grammar::set_grammar_file(const std::string& value) {
  _internal_set_grammar_file(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.Grammar.grammar_file)
}
inline std::string* Grammar::mutable_grammar_file() {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.Grammar.grammar_file)
  return _internal_mutable_grammar_file();
}
inline const std::string& Grammar::_internal_grammar_file() const {
  return grammar_file_.Get();
}
inline void Grammar::_internal_set_grammar_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  grammar_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Grammar::set_grammar_file(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  grammar_file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.Grammar.grammar_file)
}
inline void Grammar::set_grammar_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  grammar_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.Grammar.grammar_file)
}
inline void Grammar::set_grammar_file(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  grammar_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.Grammar.grammar_file)
}
inline std::string* Grammar::_internal_mutable_grammar_file() {
  _has_bits_[0] |= 0x00000001u;
  return grammar_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Grammar::release_grammar_file() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.Grammar.grammar_file)
  if (!_internal_has_grammar_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return grammar_file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Grammar::set_allocated_grammar_file(std::string* grammar_file) {
  if (grammar_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  grammar_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), grammar_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.Grammar.grammar_file)
}

// required string grammar_name = 2;
inline bool Grammar::_internal_has_grammar_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Grammar::has_grammar_name() const {
  return _internal_has_grammar_name();
}
inline void Grammar::clear_grammar_name() {
  grammar_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Grammar::grammar_name() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.Grammar.grammar_name)
  return _internal_grammar_name();
}
inline void Grammar::set_grammar_name(const std::string& value) {
  _internal_set_grammar_name(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.Grammar.grammar_name)
}
inline std::string* Grammar::mutable_grammar_name() {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.Grammar.grammar_name)
  return _internal_mutable_grammar_name();
}
inline const std::string& Grammar::_internal_grammar_name() const {
  return grammar_name_.Get();
}
inline void Grammar::_internal_set_grammar_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  grammar_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Grammar::set_grammar_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  grammar_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.Grammar.grammar_name)
}
inline void Grammar::set_grammar_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  grammar_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.Grammar.grammar_name)
}
inline void Grammar::set_grammar_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  grammar_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.Grammar.grammar_name)
}
inline std::string* Grammar::_internal_mutable_grammar_name() {
  _has_bits_[0] |= 0x00000002u;
  return grammar_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Grammar::release_grammar_name() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.Grammar.grammar_name)
  if (!_internal_has_grammar_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return grammar_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Grammar::set_allocated_grammar_name(std::string* grammar_name) {
  if (grammar_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  grammar_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), grammar_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.Grammar.grammar_name)
}

// repeated .speech.sparrowhawk.Rule rules = 3;
inline int Grammar::_internal_rules_size() const {
  return rules_.size();
}
inline int Grammar::rules_size() const {
  return _internal_rules_size();
}
inline void Grammar::clear_rules() {
  rules_.Clear();
}
inline ::speech::sparrowhawk::Rule* Grammar::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.Grammar.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::Rule >*
Grammar::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:speech.sparrowhawk.Grammar.rules)
  return &rules_;
}
inline const ::speech::sparrowhawk::Rule& Grammar::_internal_rules(int index) const {
  return rules_.Get(index);
}
inline const ::speech::sparrowhawk::Rule& Grammar::rules(int index) const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.Grammar.rules)
  return _internal_rules(index);
}
inline ::speech::sparrowhawk::Rule* Grammar::_internal_add_rules() {
  return rules_.Add();
}
inline ::speech::sparrowhawk::Rule* Grammar::add_rules() {
  // @@protoc_insertion_point(field_add:speech.sparrowhawk.Grammar.rules)
  return _internal_add_rules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::Rule >&
Grammar::rules() const {
  // @@protoc_insertion_point(field_list:speech.sparrowhawk.Grammar.rules)
  return rules_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sparrowhawk
}  // namespace speech

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rule_5forder_2eproto

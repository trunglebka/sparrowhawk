// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: semiotic_classes.proto

#include "semiotic_classes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_semiotic_5fclasses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cardinal_semiotic_5fclasses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_semiotic_5fclasses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal_semiotic_5fclasses_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_semiotic_5fclasses_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fraction_semiotic_5fclasses_2eproto;
namespace speech {
namespace sparrowhawk {
class CardinalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cardinal> _instance;
} _Cardinal_default_instance_;
class OrdinalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ordinal> _instance;
} _Ordinal_default_instance_;
class FractionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fraction> _instance;
} _Fraction_default_instance_;
class TimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Time> _instance;
} _Time_default_instance_;
class DecimalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Decimal> _instance;
} _Decimal_default_instance_;
class MeasureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Measure> _instance;
} _Measure_default_instance_;
class DateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Date> _instance;
} _Date_default_instance_;
class MoneyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Money> _instance;
} _Money_default_instance_;
class TelephoneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Telephone> _instance;
} _Telephone_default_instance_;
class ElectronicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Electronic> _instance;
} _Electronic_default_instance_;
class ConnectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Connector> _instance;
} _Connector_default_instance_;
class AbbreviationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Abbreviation> _instance;
} _Abbreviation_default_instance_;
}  // namespace sparrowhawk
}  // namespace speech
static void InitDefaultsscc_info_Abbreviation_semiotic_5fclasses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_Abbreviation_default_instance_;
    new (ptr) ::speech::sparrowhawk::Abbreviation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Abbreviation_semiotic_5fclasses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Abbreviation_semiotic_5fclasses_2eproto}, {}};

static void InitDefaultsscc_info_Cardinal_semiotic_5fclasses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_Cardinal_default_instance_;
    new (ptr) ::speech::sparrowhawk::Cardinal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cardinal_semiotic_5fclasses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Cardinal_semiotic_5fclasses_2eproto}, {}};

static void InitDefaultsscc_info_Connector_semiotic_5fclasses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_Connector_default_instance_;
    new (ptr) ::speech::sparrowhawk::Connector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Connector_semiotic_5fclasses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Connector_semiotic_5fclasses_2eproto}, {}};

static void InitDefaultsscc_info_Date_semiotic_5fclasses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_Date_default_instance_;
    new (ptr) ::speech::sparrowhawk::Date();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Date_semiotic_5fclasses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Date_semiotic_5fclasses_2eproto}, {}};

static void InitDefaultsscc_info_Decimal_semiotic_5fclasses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_Decimal_default_instance_;
    new (ptr) ::speech::sparrowhawk::Decimal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal_semiotic_5fclasses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Decimal_semiotic_5fclasses_2eproto}, {}};

static void InitDefaultsscc_info_Electronic_semiotic_5fclasses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_Electronic_default_instance_;
    new (ptr) ::speech::sparrowhawk::Electronic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Electronic_semiotic_5fclasses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Electronic_semiotic_5fclasses_2eproto}, {}};

static void InitDefaultsscc_info_Fraction_semiotic_5fclasses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_Fraction_default_instance_;
    new (ptr) ::speech::sparrowhawk::Fraction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Fraction_semiotic_5fclasses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Fraction_semiotic_5fclasses_2eproto}, {}};

static void InitDefaultsscc_info_Measure_semiotic_5fclasses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_Measure_default_instance_;
    new (ptr) ::speech::sparrowhawk::Measure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Measure_semiotic_5fclasses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Measure_semiotic_5fclasses_2eproto}, {
      &scc_info_Decimal_semiotic_5fclasses_2eproto.base,
      &scc_info_Fraction_semiotic_5fclasses_2eproto.base,
      &scc_info_Cardinal_semiotic_5fclasses_2eproto.base,}};

static void InitDefaultsscc_info_Money_semiotic_5fclasses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_Money_default_instance_;
    new (ptr) ::speech::sparrowhawk::Money();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Money_semiotic_5fclasses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Money_semiotic_5fclasses_2eproto}, {
      &scc_info_Decimal_semiotic_5fclasses_2eproto.base,}};

static void InitDefaultsscc_info_Ordinal_semiotic_5fclasses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_Ordinal_default_instance_;
    new (ptr) ::speech::sparrowhawk::Ordinal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ordinal_semiotic_5fclasses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ordinal_semiotic_5fclasses_2eproto}, {}};

static void InitDefaultsscc_info_Telephone_semiotic_5fclasses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_Telephone_default_instance_;
    new (ptr) ::speech::sparrowhawk::Telephone();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Telephone_semiotic_5fclasses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Telephone_semiotic_5fclasses_2eproto}, {}};

static void InitDefaultsscc_info_Time_semiotic_5fclasses_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_Time_default_instance_;
    new (ptr) ::speech::sparrowhawk::Time();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_semiotic_5fclasses_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Time_semiotic_5fclasses_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_semiotic_5fclasses_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_semiotic_5fclasses_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_semiotic_5fclasses_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_semiotic_5fclasses_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Cardinal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Cardinal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Cardinal, integer_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Cardinal, morphosyntactic_features_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Cardinal, preserve_order_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Cardinal, code_switch_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Cardinal, field_order_),
  0,
  1,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Ordinal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Ordinal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Ordinal, integer_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Ordinal, morphosyntactic_features_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Ordinal, preserve_order_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Ordinal, code_switch_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Ordinal, field_order_),
  0,
  1,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Fraction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Fraction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Fraction, integer_part_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Fraction, numerator_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Fraction, denominator_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Fraction, style_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Fraction, morphosyntactic_features_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Fraction, preserve_order_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Fraction, code_switch_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Fraction, negative_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Fraction, field_order_),
  0,
  1,
  2,
  5,
  3,
  6,
  4,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Time, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Time, hours_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Time, minutes_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Time, seconds_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Time, speak_period_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Time, suffix_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Time, style_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Time, zone_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Time, morphosyntactic_features_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Time, preserve_order_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Time, code_switch_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Time, field_order_),
  4,
  5,
  6,
  8,
  0,
  7,
  1,
  2,
  9,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Decimal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Decimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Decimal, negative_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Decimal, integer_part_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Decimal, fractional_part_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Decimal, quantity_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Decimal, exponent_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Decimal, style_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Decimal, morphosyntactic_features_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Decimal, preserve_order_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Decimal, code_switch_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Decimal, field_order_),
  6,
  0,
  1,
  2,
  3,
  8,
  4,
  7,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Measure, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Measure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Measure, decimal_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Measure, fraction_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Measure, cardinal_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Measure, units_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Measure, style_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Measure, morphosyntactic_features_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Measure, preserve_order_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Measure, code_switch_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Measure, field_order_),
  3,
  4,
  5,
  0,
  6,
  1,
  7,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Date, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Date, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Date, weekday_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Date, day_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Date, month_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Date, year_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Date, style_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Date, text_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Date, short_year_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Date, era_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Date, morphosyntactic_features_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Date, preserve_order_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Date, code_switch_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Date, field_order_),
  0,
  1,
  2,
  3,
  8,
  4,
  9,
  5,
  6,
  10,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Money, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Money, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Money, amount_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Money, quantity_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Money, currency_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Money, style_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Money, morphosyntactic_features_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Money, preserve_order_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Money, code_switch_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Money, field_order_),
  3,
  4,
  0,
  5,
  1,
  6,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Telephone, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Telephone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Telephone, country_code_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Telephone, number_part_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Telephone, extension_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Telephone, style_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Telephone, morphosyntactic_features_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Telephone, preserve_order_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Telephone, code_switch_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Telephone, field_order_),
  0,
  ~0u,
  1,
  4,
  2,
  5,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Electronic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Electronic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Electronic, protocol_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Electronic, username_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Electronic, password_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Electronic, domain_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Electronic, port_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Electronic, path_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Electronic, query_string_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Electronic, fragment_id_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Electronic, morphosyntactic_features_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Electronic, preserve_order_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Electronic, code_switch_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Electronic, field_order_),
  0,
  1,
  2,
  3,
  9,
  4,
  5,
  6,
  7,
  10,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Connector, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Connector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Connector, type_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Connector, morphosyntactic_features_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Connector, code_switch_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Abbreviation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Abbreviation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Abbreviation, text_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Abbreviation, morphosyntactic_features_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::Abbreviation, code_switch_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::speech::sparrowhawk::Cardinal)},
  { 15, 25, sizeof(::speech::sparrowhawk::Ordinal)},
  { 30, 44, sizeof(::speech::sparrowhawk::Fraction)},
  { 53, 69, sizeof(::speech::sparrowhawk::Time)},
  { 80, 95, sizeof(::speech::sparrowhawk::Decimal)},
  { 105, 119, sizeof(::speech::sparrowhawk::Measure)},
  { 128, 145, sizeof(::speech::sparrowhawk::Date)},
  { 157, 170, sizeof(::speech::sparrowhawk::Money)},
  { 178, 191, sizeof(::speech::sparrowhawk::Telephone)},
  { 199, 216, sizeof(::speech::sparrowhawk::Electronic)},
  { 228, 236, sizeof(::speech::sparrowhawk::Connector)},
  { 239, 247, sizeof(::speech::sparrowhawk::Abbreviation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_Cardinal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_Ordinal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_Fraction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_Time_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_Decimal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_Measure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_Date_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_Money_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_Telephone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_Electronic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_Connector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_Abbreviation_default_instance_),
};

const char descriptor_table_protodef_semiotic_5fclasses_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026semiotic_classes.proto\022\022speech.sparrow"
  "hawk\"\177\n\010Cardinal\022\017\n\007integer\030\001 \002(\t\022 \n\030mor"
  "phosyntactic_features\030\002 \001(\t\022\026\n\016preserve_"
  "order\030\003 \001(\010\022\023\n\013code_switch\030\004 \001(\t\022\023\n\013fiel"
  "d_order\030\005 \003(\t\"~\n\007Ordinal\022\017\n\007integer\030\001 \002("
  "\t\022 \n\030morphosyntactic_features\030\002 \001(\t\022\026\n\016p"
  "reserve_order\030\003 \001(\010\022\023\n\013code_switch\030\004 \001(\t"
  "\022\023\n\013field_order\030\005 \003(\t\"\321\001\n\010Fraction\022\024\n\014in"
  "teger_part\030\001 \001(\t\022\021\n\tnumerator\030\002 \002(\t\022\023\n\013d"
  "enominator\030\003 \002(\t\022\021\n\005style\030\004 \001(\005B\002\030\001\022 \n\030m"
  "orphosyntactic_features\030\005 \001(\t\022\026\n\016preserv"
  "e_order\030\006 \001(\010\022\023\n\013code_switch\030\007 \001(\t\022\020\n\010ne"
  "gative\030\010 \001(\010\022\023\n\013field_order\030\t \003(\t\"\352\001\n\004Ti"
  "me\022\r\n\005hours\030\001 \001(\005\022\017\n\007minutes\030\002 \001(\005\022\023\n\007se"
  "conds\030\003 \001(\005B\002\030\001\022\024\n\014speak_period\030\004 \001(\010\022\022\n"
  "\006suffix\030\005 \001(\tB\002\030\001\022\021\n\005style\030\006 \001(\005B\002\030\001\022\014\n\004"
  "zone\030\007 \001(\t\022 \n\030morphosyntactic_features\030\t"
  " \001(\t\022\026\n\016preserve_order\030\n \001(\010\022\023\n\013code_swi"
  "tch\030\013 \001(\t\022\023\n\013field_order\030\014 \003(\t\"\345\001\n\007Decim"
  "al\022\020\n\010negative\030\001 \001(\010\022\024\n\014integer_part\030\002 \001"
  "(\t\022\027\n\017fractional_part\030\003 \001(\t\022\020\n\010quantity\030"
  "\004 \001(\t\022\020\n\010exponent\030\005 \001(\t\022\021\n\005style\030\006 \001(\005B\002"
  "\030\001\022 \n\030morphosyntactic_features\030\007 \001(\t\022\026\n\016"
  "preserve_order\030\010 \001(\010\022\023\n\013code_switch\030\t \001("
  "\t\022\023\n\013field_order\030\n \003(\t\"\235\002\n\007Measure\022,\n\007de"
  "cimal\030\001 \001(\0132\033.speech.sparrowhawk.Decimal"
  "\022.\n\010fraction\030\002 \001(\0132\034.speech.sparrowhawk."
  "Fraction\022.\n\010cardinal\030\003 \001(\0132\034.speech.spar"
  "rowhawk.Cardinal\022\r\n\005units\030\004 \001(\t\022\021\n\005style"
  "\030\005 \001(\005B\002\030\001\022 \n\030morphosyntactic_features\030\006"
  " \001(\t\022\026\n\016preserve_order\030\007 \001(\010\022\023\n\013code_swi"
  "tch\030\010 \001(\t\022\023\n\013field_order\030\t \003(\t\"\357\001\n\004Date\022"
  "\017\n\007weekday\030\001 \001(\t\022\013\n\003day\030\002 \001(\t\022\r\n\005month\030\003"
  " \001(\t\022\014\n\004year\030\004 \001(\t\022\021\n\005style\030\005 \001(\005B\002\030\001\022\020\n"
  "\004text\030\006 \001(\tB\002\030\001\022\026\n\nshort_year\030\007 \001(\010B\002\030\001\022"
  "\013\n\003era\030\010 \001(\t\022 \n\030morphosyntactic_features"
  "\030\t \001(\t\022\026\n\016preserve_order\030\n \001(\010\022\023\n\013code_s"
  "witch\030\013 \001(\t\022\023\n\013field_order\030\014 \003(\t\"\317\001\n\005Mon"
  "ey\022+\n\006amount\030\001 \002(\0132\033.speech.sparrowhawk."
  "Decimal\022\020\n\010quantity\030\002 \001(\003\022\020\n\010currency\030\003 "
  "\002(\t\022\021\n\005style\030\004 \001(\005B\002\030\001\022 \n\030morphosyntacti"
  "c_features\030\005 \001(\t\022\026\n\016preserve_order\030\006 \001(\010"
  "\022\023\n\013code_switch\030\007 \001(\t\022\023\n\013field_order\030\010 \003"
  "(\t\"\300\001\n\tTelephone\022\024\n\014country_code\030\001 \001(\t\022\023"
  "\n\013number_part\030\002 \003(\t\022\021\n\textension\030\003 \001(\t\022\021"
  "\n\005style\030\004 \001(\005B\002\030\001\022 \n\030morphosyntactic_fea"
  "tures\030\005 \001(\t\022\026\n\016preserve_order\030\006 \001(\010\022\023\n\013c"
  "ode_switch\030\007 \001(\t\022\023\n\013field_order\030\010 \003(\t\"\375\001"
  "\n\nElectronic\022\020\n\010protocol\030\001 \001(\t\022\020\n\010userna"
  "me\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\016\n\006domain\030\004 \001"
  "(\t\022\014\n\004port\030\005 \001(\005\022\014\n\004path\030\006 \001(\t\022\024\n\014query_"
  "string\030\007 \001(\t\022\023\n\013fragment_id\030\010 \001(\t\022 \n\030mor"
  "phosyntactic_features\030\t \001(\t\022\026\n\016preserve_"
  "order\030\n \001(\010\022\023\n\013code_switch\030\013 \001(\t\022\023\n\013fiel"
  "d_order\030\014 \003(\t\"P\n\tConnector\022\014\n\004type\030\001 \001(\t"
  "\022 \n\030morphosyntactic_features\030\002 \001(\t\022\023\n\013co"
  "de_switch\030\003 \001(\t\"S\n\014Abbreviation\022\014\n\004text\030"
  "\001 \002(\t\022 \n\030morphosyntactic_features\030\002 \001(\t\022"
  "\023\n\013code_switch\030\003 \001(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_semiotic_5fclasses_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_semiotic_5fclasses_2eproto_sccs[12] = {
  &scc_info_Abbreviation_semiotic_5fclasses_2eproto.base,
  &scc_info_Cardinal_semiotic_5fclasses_2eproto.base,
  &scc_info_Connector_semiotic_5fclasses_2eproto.base,
  &scc_info_Date_semiotic_5fclasses_2eproto.base,
  &scc_info_Decimal_semiotic_5fclasses_2eproto.base,
  &scc_info_Electronic_semiotic_5fclasses_2eproto.base,
  &scc_info_Fraction_semiotic_5fclasses_2eproto.base,
  &scc_info_Measure_semiotic_5fclasses_2eproto.base,
  &scc_info_Money_semiotic_5fclasses_2eproto.base,
  &scc_info_Ordinal_semiotic_5fclasses_2eproto.base,
  &scc_info_Telephone_semiotic_5fclasses_2eproto.base,
  &scc_info_Time_semiotic_5fclasses_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_semiotic_5fclasses_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_semiotic_5fclasses_2eproto = {
  false, false, descriptor_table_protodef_semiotic_5fclasses_2eproto, "semiotic_classes.proto", 2340,
  &descriptor_table_semiotic_5fclasses_2eproto_once, descriptor_table_semiotic_5fclasses_2eproto_sccs, descriptor_table_semiotic_5fclasses_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_semiotic_5fclasses_2eproto::offsets,
  file_level_metadata_semiotic_5fclasses_2eproto, 12, file_level_enum_descriptors_semiotic_5fclasses_2eproto, file_level_service_descriptors_semiotic_5fclasses_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_semiotic_5fclasses_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_semiotic_5fclasses_2eproto)), true);
namespace speech {
namespace sparrowhawk {

// ===================================================================

class Cardinal::_Internal {
 public:
  using HasBits = decltype(std::declval<Cardinal>()._has_bits_);
  static void set_has_integer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_morphosyntactic_features(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_preserve_order(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_code_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Cardinal::Cardinal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_order_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.Cardinal)
}
Cardinal::Cardinal(const Cardinal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  integer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_integer()) {
    integer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_integer(), 
      GetArena());
  }
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_morphosyntactic_features()) {
    morphosyntactic_features_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_morphosyntactic_features(), 
      GetArena());
  }
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code_switch()) {
    code_switch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code_switch(), 
      GetArena());
  }
  preserve_order_ = from.preserve_order_;
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Cardinal)
}

void Cardinal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Cardinal_semiotic_5fclasses_2eproto.base);
  integer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preserve_order_ = false;
}

Cardinal::~Cardinal() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Cardinal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Cardinal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  integer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Cardinal::ArenaDtor(void* object) {
  Cardinal* _this = reinterpret_cast< Cardinal* >(object);
  (void)_this;
}
void Cardinal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Cardinal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cardinal& Cardinal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Cardinal_semiotic_5fclasses_2eproto.base);
  return *internal_default_instance();
}


void Cardinal::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Cardinal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      integer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      morphosyntactic_features_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      code_switch_.ClearNonDefaultToEmpty();
    }
  }
  preserve_order_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cardinal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string integer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_integer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Cardinal.integer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string morphosyntactic_features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_morphosyntactic_features();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Cardinal.morphosyntactic_features");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool preserve_order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_preserve_order(&has_bits);
          preserve_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string code_switch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_code_switch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Cardinal.code_switch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string field_order = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field_order();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Cardinal.field_order");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cardinal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Cardinal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string integer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_integer().data(), static_cast<int>(this->_internal_integer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Cardinal.integer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_integer(), target);
  }

  // optional string morphosyntactic_features = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_morphosyntactic_features().data(), static_cast<int>(this->_internal_morphosyntactic_features().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Cardinal.morphosyntactic_features");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_preserve_order(), target);
  }

  // optional string code_switch = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code_switch().data(), static_cast<int>(this->_internal_code_switch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Cardinal.code_switch");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_code_switch(), target);
  }

  // repeated string field_order = 5;
  for (int i = 0, n = this->_internal_field_order_size(); i < n; i++) {
    const auto& s = this->_internal_field_order(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Cardinal.field_order");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Cardinal)
  return target;
}

size_t Cardinal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Cardinal)
  size_t total_size = 0;

  // required string integer = 1;
  if (_internal_has_integer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integer());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string field_order = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_order_.size());
  for (int i = 0, n = field_order_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      field_order_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional string morphosyntactic_features = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_morphosyntactic_features());
    }

    // optional string code_switch = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code_switch());
    }

    // optional bool preserve_order = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cardinal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Cardinal)
  GOOGLE_DCHECK_NE(&from, this);
  const Cardinal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cardinal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Cardinal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Cardinal)
    MergeFrom(*source);
  }
}

void Cardinal::MergeFrom(const Cardinal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Cardinal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_integer(from._internal_integer());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_morphosyntactic_features(from._internal_morphosyntactic_features());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_code_switch(from._internal_code_switch());
    }
    if (cached_has_bits & 0x00000008u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Cardinal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Cardinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cardinal::CopyFrom(const Cardinal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Cardinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cardinal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Cardinal::InternalSwap(Cardinal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_order_.InternalSwap(&other->field_order_);
  integer_.Swap(&other->integer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_switch_.Swap(&other->code_switch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(preserve_order_, other->preserve_order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cardinal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Ordinal::_Internal {
 public:
  using HasBits = decltype(std::declval<Ordinal>()._has_bits_);
  static void set_has_integer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_morphosyntactic_features(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_preserve_order(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_code_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Ordinal::Ordinal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_order_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.Ordinal)
}
Ordinal::Ordinal(const Ordinal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  integer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_integer()) {
    integer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_integer(), 
      GetArena());
  }
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_morphosyntactic_features()) {
    morphosyntactic_features_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_morphosyntactic_features(), 
      GetArena());
  }
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code_switch()) {
    code_switch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code_switch(), 
      GetArena());
  }
  preserve_order_ = from.preserve_order_;
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Ordinal)
}

void Ordinal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ordinal_semiotic_5fclasses_2eproto.base);
  integer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preserve_order_ = false;
}

Ordinal::~Ordinal() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Ordinal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ordinal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  integer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Ordinal::ArenaDtor(void* object) {
  Ordinal* _this = reinterpret_cast< Ordinal* >(object);
  (void)_this;
}
void Ordinal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ordinal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ordinal& Ordinal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ordinal_semiotic_5fclasses_2eproto.base);
  return *internal_default_instance();
}


void Ordinal::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Ordinal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      integer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      morphosyntactic_features_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      code_switch_.ClearNonDefaultToEmpty();
    }
  }
  preserve_order_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ordinal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string integer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_integer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Ordinal.integer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string morphosyntactic_features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_morphosyntactic_features();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Ordinal.morphosyntactic_features");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool preserve_order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_preserve_order(&has_bits);
          preserve_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string code_switch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_code_switch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Ordinal.code_switch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string field_order = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field_order();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Ordinal.field_order");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ordinal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Ordinal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string integer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_integer().data(), static_cast<int>(this->_internal_integer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Ordinal.integer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_integer(), target);
  }

  // optional string morphosyntactic_features = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_morphosyntactic_features().data(), static_cast<int>(this->_internal_morphosyntactic_features().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Ordinal.morphosyntactic_features");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_preserve_order(), target);
  }

  // optional string code_switch = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code_switch().data(), static_cast<int>(this->_internal_code_switch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Ordinal.code_switch");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_code_switch(), target);
  }

  // repeated string field_order = 5;
  for (int i = 0, n = this->_internal_field_order_size(); i < n; i++) {
    const auto& s = this->_internal_field_order(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Ordinal.field_order");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Ordinal)
  return target;
}

size_t Ordinal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Ordinal)
  size_t total_size = 0;

  // required string integer = 1;
  if (_internal_has_integer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integer());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string field_order = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_order_.size());
  for (int i = 0, n = field_order_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      field_order_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional string morphosyntactic_features = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_morphosyntactic_features());
    }

    // optional string code_switch = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code_switch());
    }

    // optional bool preserve_order = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ordinal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Ordinal)
  GOOGLE_DCHECK_NE(&from, this);
  const Ordinal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ordinal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Ordinal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Ordinal)
    MergeFrom(*source);
  }
}

void Ordinal::MergeFrom(const Ordinal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Ordinal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_integer(from._internal_integer());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_morphosyntactic_features(from._internal_morphosyntactic_features());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_code_switch(from._internal_code_switch());
    }
    if (cached_has_bits & 0x00000008u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ordinal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Ordinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ordinal::CopyFrom(const Ordinal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Ordinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ordinal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Ordinal::InternalSwap(Ordinal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_order_.InternalSwap(&other->field_order_);
  integer_.Swap(&other->integer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_switch_.Swap(&other->code_switch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(preserve_order_, other->preserve_order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ordinal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Fraction::_Internal {
 public:
  using HasBits = decltype(std::declval<Fraction>()._has_bits_);
  static void set_has_integer_part(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_numerator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_denominator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_morphosyntactic_features(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_preserve_order(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_code_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

Fraction::Fraction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_order_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.Fraction)
}
Fraction::Fraction(const Fraction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  integer_part_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_integer_part()) {
    integer_part_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_integer_part(), 
      GetArena());
  }
  numerator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_numerator()) {
    numerator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_numerator(), 
      GetArena());
  }
  denominator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_denominator()) {
    denominator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_denominator(), 
      GetArena());
  }
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_morphosyntactic_features()) {
    morphosyntactic_features_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_morphosyntactic_features(), 
      GetArena());
  }
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code_switch()) {
    code_switch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code_switch(), 
      GetArena());
  }
  ::memcpy(&style_, &from.style_,
    static_cast<size_t>(reinterpret_cast<char*>(&negative_) -
    reinterpret_cast<char*>(&style_)) + sizeof(negative_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Fraction)
}

void Fraction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fraction_semiotic_5fclasses_2eproto.base);
  integer_part_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  numerator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  denominator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&style_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&negative_) -
      reinterpret_cast<char*>(&style_)) + sizeof(negative_));
}

Fraction::~Fraction() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Fraction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Fraction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  integer_part_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  numerator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  denominator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Fraction::ArenaDtor(void* object) {
  Fraction* _this = reinterpret_cast< Fraction* >(object);
  (void)_this;
}
void Fraction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Fraction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fraction& Fraction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fraction_semiotic_5fclasses_2eproto.base);
  return *internal_default_instance();
}


void Fraction::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Fraction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      integer_part_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      numerator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      denominator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      morphosyntactic_features_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      code_switch_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&negative_) -
        reinterpret_cast<char*>(&style_)) + sizeof(negative_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fraction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string integer_part = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_integer_part();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Fraction.integer_part");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string numerator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_numerator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Fraction.numerator");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string denominator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_denominator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Fraction.denominator");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 style = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_style(&has_bits);
          style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string morphosyntactic_features = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_morphosyntactic_features();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Fraction.morphosyntactic_features");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool preserve_order = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_preserve_order(&has_bits);
          preserve_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string code_switch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_code_switch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Fraction.code_switch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool negative = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_negative(&has_bits);
          negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string field_order = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field_order();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Fraction.field_order");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fraction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Fraction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string integer_part = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_integer_part().data(), static_cast<int>(this->_internal_integer_part().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.integer_part");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_integer_part(), target);
  }

  // required string numerator = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_numerator().data(), static_cast<int>(this->_internal_numerator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.numerator");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_numerator(), target);
  }

  // required string denominator = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_denominator().data(), static_cast<int>(this->_internal_denominator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.denominator");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_denominator(), target);
  }

  // optional int32 style = 4 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_style(), target);
  }

  // optional string morphosyntactic_features = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_morphosyntactic_features().data(), static_cast<int>(this->_internal_morphosyntactic_features().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.morphosyntactic_features");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_preserve_order(), target);
  }

  // optional string code_switch = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code_switch().data(), static_cast<int>(this->_internal_code_switch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.code_switch");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_code_switch(), target);
  }

  // optional bool negative = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_negative(), target);
  }

  // repeated string field_order = 9;
  for (int i = 0, n = this->_internal_field_order_size(); i < n; i++) {
    const auto& s = this->_internal_field_order(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.field_order");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Fraction)
  return target;
}

size_t Fraction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:speech.sparrowhawk.Fraction)
  size_t total_size = 0;

  if (_internal_has_numerator()) {
    // required string numerator = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_numerator());
  }

  if (_internal_has_denominator()) {
    // required string denominator = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_denominator());
  }

  return total_size;
}
size_t Fraction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Fraction)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required string numerator = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_numerator());

    // required string denominator = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_denominator());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string field_order = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_order_.size());
  for (int i = 0, n = field_order_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      field_order_.Get(i));
  }

  // optional string integer_part = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integer_part());
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional string morphosyntactic_features = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_morphosyntactic_features());
    }

    // optional string code_switch = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code_switch());
    }

    // optional int32 style = 4 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_style());
    }

    // optional bool preserve_order = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool negative = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fraction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Fraction)
  GOOGLE_DCHECK_NE(&from, this);
  const Fraction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fraction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Fraction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Fraction)
    MergeFrom(*source);
  }
}

void Fraction::MergeFrom(const Fraction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Fraction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_integer_part(from._internal_integer_part());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_numerator(from._internal_numerator());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_denominator(from._internal_denominator());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_morphosyntactic_features(from._internal_morphosyntactic_features());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_code_switch(from._internal_code_switch());
    }
    if (cached_has_bits & 0x00000020u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000040u) {
      preserve_order_ = from.preserve_order_;
    }
    if (cached_has_bits & 0x00000080u) {
      negative_ = from.negative_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fraction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Fraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fraction::CopyFrom(const Fraction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Fraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fraction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Fraction::InternalSwap(Fraction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_order_.InternalSwap(&other->field_order_);
  integer_part_.Swap(&other->integer_part_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  numerator_.Swap(&other->numerator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  denominator_.Swap(&other->denominator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_switch_.Swap(&other->code_switch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fraction, negative_)
      + sizeof(Fraction::negative_)
      - PROTOBUF_FIELD_OFFSET(Fraction, style_)>(
          reinterpret_cast<char*>(&style_),
          reinterpret_cast<char*>(&other->style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fraction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Time::_Internal {
 public:
  using HasBits = decltype(std::declval<Time>()._has_bits_);
  static void set_has_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_speak_period(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_morphosyntactic_features(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preserve_order(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_code_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Time::Time(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_order_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.Time)
}
Time::Time(const Time& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_suffix()) {
    suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_suffix(), 
      GetArena());
  }
  zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_zone()) {
    zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_zone(), 
      GetArena());
  }
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_morphosyntactic_features()) {
    morphosyntactic_features_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_morphosyntactic_features(), 
      GetArena());
  }
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code_switch()) {
    code_switch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code_switch(), 
      GetArena());
  }
  ::memcpy(&hours_, &from.hours_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
    reinterpret_cast<char*>(&hours_)) + sizeof(preserve_order_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Time)
}

void Time::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Time_semiotic_5fclasses_2eproto.base);
  suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hours_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
      reinterpret_cast<char*>(&hours_)) + sizeof(preserve_order_));
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Time)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Time::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  suffix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Time::ArenaDtor(void* object) {
  Time* _this = reinterpret_cast< Time* >(object);
  (void)_this;
}
void Time::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Time::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Time& Time::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Time_semiotic_5fclasses_2eproto.base);
  return *internal_default_instance();
}


void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Time)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      suffix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      zone_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      morphosyntactic_features_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      code_switch_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&hours_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&style_) -
        reinterpret_cast<char*>(&hours_)) + sizeof(style_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&speak_period_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preserve_order_) -
        reinterpret_cast<char*>(&speak_period_)) + sizeof(preserve_order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Time::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 hours = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hours(&has_bits);
          hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 minutes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_minutes(&has_bits);
          minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 seconds = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_seconds(&has_bits);
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool speak_period = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_speak_period(&has_bits);
          speak_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string suffix = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_suffix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Time.suffix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 style = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_style(&has_bits);
          style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string zone = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_zone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Time.zone");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string morphosyntactic_features = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_morphosyntactic_features();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Time.morphosyntactic_features");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool preserve_order = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_preserve_order(&has_bits);
          preserve_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string code_switch = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_code_switch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Time.code_switch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string field_order = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field_order();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Time.field_order");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Time::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Time)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hours = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hours(), target);
  }

  // optional int32 minutes = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_minutes(), target);
  }

  // optional int32 seconds = 3 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_seconds(), target);
  }

  // optional bool speak_period = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_speak_period(), target);
  }

  // optional string suffix = 5 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_suffix().data(), static_cast<int>(this->_internal_suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Time.suffix");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_suffix(), target);
  }

  // optional int32 style = 6 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_style(), target);
  }

  // optional string zone = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_zone().data(), static_cast<int>(this->_internal_zone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Time.zone");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_zone(), target);
  }

  // optional string morphosyntactic_features = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_morphosyntactic_features().data(), static_cast<int>(this->_internal_morphosyntactic_features().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Time.morphosyntactic_features");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_preserve_order(), target);
  }

  // optional string code_switch = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code_switch().data(), static_cast<int>(this->_internal_code_switch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Time.code_switch");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_code_switch(), target);
  }

  // repeated string field_order = 12;
  for (int i = 0, n = this->_internal_field_order_size(); i < n; i++) {
    const auto& s = this->_internal_field_order(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Time.field_order");
    target = stream->WriteString(12, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Time)
  return target;
}

size_t Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Time)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string field_order = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_order_.size());
  for (int i = 0, n = field_order_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      field_order_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string suffix = 5 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_suffix());
    }

    // optional string zone = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_zone());
    }

    // optional string morphosyntactic_features = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_morphosyntactic_features());
    }

    // optional string code_switch = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code_switch());
    }

    // optional int32 hours = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hours());
    }

    // optional int32 minutes = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_minutes());
    }

    // optional int32 seconds = 3 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_seconds());
    }

    // optional int32 style = 6 [deprecated = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_style());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool speak_period = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool preserve_order = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Time::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Time)
  GOOGLE_DCHECK_NE(&from, this);
  const Time* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Time>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Time)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Time)
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Time)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_suffix(from._internal_suffix());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_zone(from._internal_zone());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_morphosyntactic_features(from._internal_morphosyntactic_features());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_code_switch(from._internal_code_switch());
    }
    if (cached_has_bits & 0x00000010u) {
      hours_ = from.hours_;
    }
    if (cached_has_bits & 0x00000020u) {
      minutes_ = from.minutes_;
    }
    if (cached_has_bits & 0x00000040u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000080u) {
      style_ = from.style_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      speak_period_ = from.speak_period_;
    }
    if (cached_has_bits & 0x00000200u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Time::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {
  return true;
}

void Time::InternalSwap(Time* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_order_.InternalSwap(&other->field_order_);
  suffix_.Swap(&other->suffix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  zone_.Swap(&other->zone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_switch_.Swap(&other->code_switch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Time, preserve_order_)
      + sizeof(Time::preserve_order_)
      - PROTOBUF_FIELD_OFFSET(Time, hours_)>(
          reinterpret_cast<char*>(&hours_),
          reinterpret_cast<char*>(&other->hours_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Time::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Decimal::_Internal {
 public:
  using HasBits = decltype(std::declval<Decimal>()._has_bits_);
  static void set_has_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_integer_part(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fractional_part(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_exponent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_morphosyntactic_features(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_preserve_order(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_code_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Decimal::Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_order_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.Decimal)
}
Decimal::Decimal(const Decimal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  integer_part_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_integer_part()) {
    integer_part_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_integer_part(), 
      GetArena());
  }
  fractional_part_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fractional_part()) {
    fractional_part_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fractional_part(), 
      GetArena());
  }
  quantity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_quantity()) {
    quantity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_quantity(), 
      GetArena());
  }
  exponent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_exponent()) {
    exponent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exponent(), 
      GetArena());
  }
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_morphosyntactic_features()) {
    morphosyntactic_features_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_morphosyntactic_features(), 
      GetArena());
  }
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code_switch()) {
    code_switch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code_switch(), 
      GetArena());
  }
  ::memcpy(&negative_, &from.negative_,
    static_cast<size_t>(reinterpret_cast<char*>(&style_) -
    reinterpret_cast<char*>(&negative_)) + sizeof(style_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Decimal)
}

void Decimal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Decimal_semiotic_5fclasses_2eproto.base);
  integer_part_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fractional_part_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quantity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exponent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&negative_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&style_) -
      reinterpret_cast<char*>(&negative_)) + sizeof(style_));
}

Decimal::~Decimal() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Decimal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Decimal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  integer_part_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fractional_part_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quantity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exponent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Decimal::ArenaDtor(void* object) {
  Decimal* _this = reinterpret_cast< Decimal* >(object);
  (void)_this;
}
void Decimal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Decimal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decimal& Decimal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Decimal_semiotic_5fclasses_2eproto.base);
  return *internal_default_instance();
}


void Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      integer_part_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      fractional_part_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      quantity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      exponent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      morphosyntactic_features_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      code_switch_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&negative_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preserve_order_) -
        reinterpret_cast<char*>(&negative_)) + sizeof(preserve_order_));
  }
  style_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Decimal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool negative = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_negative(&has_bits);
          negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string integer_part = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_integer_part();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Decimal.integer_part");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fractional_part = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fractional_part();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Decimal.fractional_part");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_quantity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Decimal.quantity");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string exponent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_exponent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Decimal.exponent");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 style = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_style(&has_bits);
          style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string morphosyntactic_features = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_morphosyntactic_features();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Decimal.morphosyntactic_features");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool preserve_order = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_preserve_order(&has_bits);
          preserve_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string code_switch = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_code_switch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Decimal.code_switch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string field_order = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field_order();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Decimal.field_order");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Decimal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool negative = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_negative(), target);
  }

  // optional string integer_part = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_integer_part().data(), static_cast<int>(this->_internal_integer_part().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.integer_part");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_integer_part(), target);
  }

  // optional string fractional_part = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fractional_part().data(), static_cast<int>(this->_internal_fractional_part().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.fractional_part");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fractional_part(), target);
  }

  // optional string quantity = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_quantity().data(), static_cast<int>(this->_internal_quantity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.quantity");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_quantity(), target);
  }

  // optional string exponent = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_exponent().data(), static_cast<int>(this->_internal_exponent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.exponent");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_exponent(), target);
  }

  // optional int32 style = 6 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_style(), target);
  }

  // optional string morphosyntactic_features = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_morphosyntactic_features().data(), static_cast<int>(this->_internal_morphosyntactic_features().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.morphosyntactic_features");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_preserve_order(), target);
  }

  // optional string code_switch = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code_switch().data(), static_cast<int>(this->_internal_code_switch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.code_switch");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_code_switch(), target);
  }

  // repeated string field_order = 10;
  for (int i = 0, n = this->_internal_field_order_size(); i < n; i++) {
    const auto& s = this->_internal_field_order(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.field_order");
    target = stream->WriteString(10, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Decimal)
  return target;
}

size_t Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Decimal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string field_order = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_order_.size());
  for (int i = 0, n = field_order_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      field_order_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string integer_part = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_integer_part());
    }

    // optional string fractional_part = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fractional_part());
    }

    // optional string quantity = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_quantity());
    }

    // optional string exponent = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_exponent());
    }

    // optional string morphosyntactic_features = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_morphosyntactic_features());
    }

    // optional string code_switch = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code_switch());
    }

    // optional bool negative = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool preserve_order = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional int32 style = 6 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_style());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decimal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  const Decimal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Decimal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Decimal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Decimal)
    MergeFrom(*source);
  }
}

void Decimal::MergeFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_integer_part(from._internal_integer_part());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_fractional_part(from._internal_fractional_part());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_quantity(from._internal_quantity());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_exponent(from._internal_exponent());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_morphosyntactic_features(from._internal_morphosyntactic_features());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_code_switch(from._internal_code_switch());
    }
    if (cached_has_bits & 0x00000040u) {
      negative_ = from.negative_;
    }
    if (cached_has_bits & 0x00000080u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_style(from._internal_style());
  }
}

void Decimal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decimal::CopyFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decimal::IsInitialized() const {
  return true;
}

void Decimal::InternalSwap(Decimal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_order_.InternalSwap(&other->field_order_);
  integer_part_.Swap(&other->integer_part_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fractional_part_.Swap(&other->fractional_part_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  quantity_.Swap(&other->quantity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exponent_.Swap(&other->exponent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_switch_.Swap(&other->code_switch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Decimal, style_)
      + sizeof(Decimal::style_)
      - PROTOBUF_FIELD_OFFSET(Decimal, negative_)>(
          reinterpret_cast<char*>(&negative_),
          reinterpret_cast<char*>(&other->negative_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Decimal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Measure::_Internal {
 public:
  using HasBits = decltype(std::declval<Measure>()._has_bits_);
  static const ::speech::sparrowhawk::Decimal& decimal(const Measure* msg);
  static void set_has_decimal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::speech::sparrowhawk::Fraction& fraction(const Measure* msg);
  static void set_has_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::speech::sparrowhawk::Cardinal& cardinal(const Measure* msg);
  static void set_has_cardinal(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_morphosyntactic_features(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_preserve_order(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_code_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::speech::sparrowhawk::Decimal&
Measure::_Internal::decimal(const Measure* msg) {
  return *msg->decimal_;
}
const ::speech::sparrowhawk::Fraction&
Measure::_Internal::fraction(const Measure* msg) {
  return *msg->fraction_;
}
const ::speech::sparrowhawk::Cardinal&
Measure::_Internal::cardinal(const Measure* msg) {
  return *msg->cardinal_;
}
Measure::Measure(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_order_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.Measure)
}
Measure::Measure(const Measure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_units()) {
    units_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_units(), 
      GetArena());
  }
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_morphosyntactic_features()) {
    morphosyntactic_features_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_morphosyntactic_features(), 
      GetArena());
  }
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code_switch()) {
    code_switch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code_switch(), 
      GetArena());
  }
  if (from._internal_has_decimal()) {
    decimal_ = new ::speech::sparrowhawk::Decimal(*from.decimal_);
  } else {
    decimal_ = nullptr;
  }
  if (from._internal_has_fraction()) {
    fraction_ = new ::speech::sparrowhawk::Fraction(*from.fraction_);
  } else {
    fraction_ = nullptr;
  }
  if (from._internal_has_cardinal()) {
    cardinal_ = new ::speech::sparrowhawk::Cardinal(*from.cardinal_);
  } else {
    cardinal_ = nullptr;
  }
  ::memcpy(&style_, &from.style_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
    reinterpret_cast<char*>(&style_)) + sizeof(preserve_order_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Measure)
}

void Measure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Measure_semiotic_5fclasses_2eproto.base);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&decimal_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
      reinterpret_cast<char*>(&decimal_)) + sizeof(preserve_order_));
}

Measure::~Measure() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Measure)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Measure::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  units_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete decimal_;
  if (this != internal_default_instance()) delete fraction_;
  if (this != internal_default_instance()) delete cardinal_;
}

void Measure::ArenaDtor(void* object) {
  Measure* _this = reinterpret_cast< Measure* >(object);
  (void)_this;
}
void Measure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Measure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Measure& Measure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Measure_semiotic_5fclasses_2eproto.base);
  return *internal_default_instance();
}


void Measure::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Measure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      units_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      morphosyntactic_features_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      code_switch_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(decimal_ != nullptr);
      decimal_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(fraction_ != nullptr);
      fraction_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(cardinal_ != nullptr);
      cardinal_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preserve_order_) -
        reinterpret_cast<char*>(&style_)) + sizeof(preserve_order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Measure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .speech.sparrowhawk.Decimal decimal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_decimal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.Fraction fraction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .speech.sparrowhawk.Cardinal cardinal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardinal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string units = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_units();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Measure.units");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 style = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_style(&has_bits);
          style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string morphosyntactic_features = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_morphosyntactic_features();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Measure.morphosyntactic_features");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool preserve_order = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_preserve_order(&has_bits);
          preserve_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string code_switch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_code_switch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Measure.code_switch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string field_order = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field_order();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Measure.field_order");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Measure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Measure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .speech.sparrowhawk.Decimal decimal = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::decimal(this), target, stream);
  }

  // optional .speech.sparrowhawk.Fraction fraction = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fraction(this), target, stream);
  }

  // optional .speech.sparrowhawk.Cardinal cardinal = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cardinal(this), target, stream);
  }

  // optional string units = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_units().data(), static_cast<int>(this->_internal_units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Measure.units");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_units(), target);
  }

  // optional int32 style = 5 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_style(), target);
  }

  // optional string morphosyntactic_features = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_morphosyntactic_features().data(), static_cast<int>(this->_internal_morphosyntactic_features().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Measure.morphosyntactic_features");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_preserve_order(), target);
  }

  // optional string code_switch = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code_switch().data(), static_cast<int>(this->_internal_code_switch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Measure.code_switch");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_code_switch(), target);
  }

  // repeated string field_order = 9;
  for (int i = 0, n = this->_internal_field_order_size(); i < n; i++) {
    const auto& s = this->_internal_field_order(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Measure.field_order");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Measure)
  return target;
}

size_t Measure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Measure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string field_order = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_order_.size());
  for (int i = 0, n = field_order_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      field_order_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string units = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_units());
    }

    // optional string morphosyntactic_features = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_morphosyntactic_features());
    }

    // optional string code_switch = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code_switch());
    }

    // optional .speech.sparrowhawk.Decimal decimal = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *decimal_);
    }

    // optional .speech.sparrowhawk.Fraction fraction = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fraction_);
    }

    // optional .speech.sparrowhawk.Cardinal cardinal = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cardinal_);
    }

    // optional int32 style = 5 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_style());
    }

    // optional bool preserve_order = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Measure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Measure)
  GOOGLE_DCHECK_NE(&from, this);
  const Measure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Measure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Measure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Measure)
    MergeFrom(*source);
  }
}

void Measure::MergeFrom(const Measure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Measure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_units(from._internal_units());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_morphosyntactic_features(from._internal_morphosyntactic_features());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_code_switch(from._internal_code_switch());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_decimal()->::speech::sparrowhawk::Decimal::MergeFrom(from._internal_decimal());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_fraction()->::speech::sparrowhawk::Fraction::MergeFrom(from._internal_fraction());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_cardinal()->::speech::sparrowhawk::Cardinal::MergeFrom(from._internal_cardinal());
    }
    if (cached_has_bits & 0x00000040u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000080u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Measure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measure::CopyFrom(const Measure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measure::IsInitialized() const {
  if (_internal_has_fraction()) {
    if (!fraction_->IsInitialized()) return false;
  }
  if (_internal_has_cardinal()) {
    if (!cardinal_->IsInitialized()) return false;
  }
  return true;
}

void Measure::InternalSwap(Measure* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_order_.InternalSwap(&other->field_order_);
  units_.Swap(&other->units_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_switch_.Swap(&other->code_switch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Measure, preserve_order_)
      + sizeof(Measure::preserve_order_)
      - PROTOBUF_FIELD_OFFSET(Measure, decimal_)>(
          reinterpret_cast<char*>(&decimal_),
          reinterpret_cast<char*>(&other->decimal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Measure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Date::_Internal {
 public:
  using HasBits = decltype(std::declval<Date>()._has_bits_);
  static void set_has_weekday(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_day(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_short_year(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_era(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_morphosyntactic_features(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_preserve_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_code_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Date::Date(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_order_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.Date)
}
Date::Date(const Date& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  weekday_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_weekday()) {
    weekday_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_weekday(), 
      GetArena());
  }
  day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_day()) {
    day_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_day(), 
      GetArena());
  }
  month_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_month()) {
    month_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_month(), 
      GetArena());
  }
  year_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_year()) {
    year_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_year(), 
      GetArena());
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  era_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_era()) {
    era_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_era(), 
      GetArena());
  }
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_morphosyntactic_features()) {
    morphosyntactic_features_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_morphosyntactic_features(), 
      GetArena());
  }
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code_switch()) {
    code_switch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code_switch(), 
      GetArena());
  }
  ::memcpy(&style_, &from.style_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
    reinterpret_cast<char*>(&style_)) + sizeof(preserve_order_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Date)
}

void Date::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Date_semiotic_5fclasses_2eproto.base);
  weekday_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  month_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  year_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  era_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&style_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
      reinterpret_cast<char*>(&style_)) + sizeof(preserve_order_));
}

Date::~Date() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Date)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Date::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  weekday_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  day_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  month_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  year_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  era_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Date::ArenaDtor(void* object) {
  Date* _this = reinterpret_cast< Date* >(object);
  (void)_this;
}
void Date::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Date::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Date& Date::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Date_semiotic_5fclasses_2eproto.base);
  return *internal_default_instance();
}


void Date::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Date)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      weekday_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      day_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      month_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      year_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      era_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      morphosyntactic_features_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      code_switch_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preserve_order_) -
        reinterpret_cast<char*>(&style_)) + sizeof(preserve_order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Date::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string weekday = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_weekday();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Date.weekday");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string day = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_day();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Date.day");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string month = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_month();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Date.month");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_year();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Date.year");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 style = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_style(&has_bits);
          style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Date.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool short_year = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_short_year(&has_bits);
          short_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string era = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_era();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Date.era");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string morphosyntactic_features = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_morphosyntactic_features();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Date.morphosyntactic_features");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool preserve_order = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_preserve_order(&has_bits);
          preserve_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string code_switch = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_code_switch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Date.code_switch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string field_order = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field_order();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Date.field_order");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Date::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Date)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string weekday = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_weekday().data(), static_cast<int>(this->_internal_weekday().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.weekday");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_weekday(), target);
  }

  // optional string day = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_day().data(), static_cast<int>(this->_internal_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.day");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_day(), target);
  }

  // optional string month = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_month().data(), static_cast<int>(this->_internal_month().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.month");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_month(), target);
  }

  // optional string year = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_year().data(), static_cast<int>(this->_internal_year().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.year");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_year(), target);
  }

  // optional int32 style = 5 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_style(), target);
  }

  // optional string text = 6 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.text");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_text(), target);
  }

  // optional bool short_year = 7 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_short_year(), target);
  }

  // optional string era = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_era().data(), static_cast<int>(this->_internal_era().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.era");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_era(), target);
  }

  // optional string morphosyntactic_features = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_morphosyntactic_features().data(), static_cast<int>(this->_internal_morphosyntactic_features().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.morphosyntactic_features");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_preserve_order(), target);
  }

  // optional string code_switch = 11;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code_switch().data(), static_cast<int>(this->_internal_code_switch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.code_switch");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_code_switch(), target);
  }

  // repeated string field_order = 12;
  for (int i = 0, n = this->_internal_field_order_size(); i < n; i++) {
    const auto& s = this->_internal_field_order(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.field_order");
    target = stream->WriteString(12, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Date)
  return target;
}

size_t Date::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Date)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string field_order = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_order_.size());
  for (int i = 0, n = field_order_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      field_order_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string weekday = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_weekday());
    }

    // optional string day = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_day());
    }

    // optional string month = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_month());
    }

    // optional string year = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_year());
    }

    // optional string text = 6 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string era = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_era());
    }

    // optional string morphosyntactic_features = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_morphosyntactic_features());
    }

    // optional string code_switch = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code_switch());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 style = 5 [deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_style());
    }

    // optional bool short_year = 7 [deprecated = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool preserve_order = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Date::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Date)
  GOOGLE_DCHECK_NE(&from, this);
  const Date* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Date>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Date)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Date)
    MergeFrom(*source);
  }
}

void Date::MergeFrom(const Date& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Date)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_weekday(from._internal_weekday());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_day(from._internal_day());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_month(from._internal_month());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_year(from._internal_year());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_era(from._internal_era());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_morphosyntactic_features(from._internal_morphosyntactic_features());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_code_switch(from._internal_code_switch());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000200u) {
      short_year_ = from.short_year_;
    }
    if (cached_has_bits & 0x00000400u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Date::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Date::CopyFrom(const Date& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Date::IsInitialized() const {
  return true;
}

void Date::InternalSwap(Date* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_order_.InternalSwap(&other->field_order_);
  weekday_.Swap(&other->weekday_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  day_.Swap(&other->day_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  month_.Swap(&other->month_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  year_.Swap(&other->year_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  era_.Swap(&other->era_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_switch_.Swap(&other->code_switch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Date, preserve_order_)
      + sizeof(Date::preserve_order_)
      - PROTOBUF_FIELD_OFFSET(Date, style_)>(
          reinterpret_cast<char*>(&style_),
          reinterpret_cast<char*>(&other->style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Date::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Money::_Internal {
 public:
  using HasBits = decltype(std::declval<Money>()._has_bits_);
  static const ::speech::sparrowhawk::Decimal& amount(const Money* msg);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_morphosyntactic_features(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_preserve_order(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_code_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

const ::speech::sparrowhawk::Decimal&
Money::_Internal::amount(const Money* msg) {
  return *msg->amount_;
}
Money::Money(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_order_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.Money)
}
Money::Money(const Money& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_currency()) {
    currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currency(), 
      GetArena());
  }
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_morphosyntactic_features()) {
    morphosyntactic_features_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_morphosyntactic_features(), 
      GetArena());
  }
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code_switch()) {
    code_switch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code_switch(), 
      GetArena());
  }
  if (from._internal_has_amount()) {
    amount_ = new ::speech::sparrowhawk::Decimal(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  ::memcpy(&quantity_, &from.quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
    reinterpret_cast<char*>(&quantity_)) + sizeof(preserve_order_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Money)
}

void Money::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Money_semiotic_5fclasses_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(preserve_order_));
}

Money::~Money() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Money)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Money::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void Money::ArenaDtor(void* object) {
  Money* _this = reinterpret_cast< Money* >(object);
  (void)_this;
}
void Money::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Money::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Money& Money::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Money_semiotic_5fclasses_2eproto.base);
  return *internal_default_instance();
}


void Money::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Money)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      currency_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      morphosyntactic_features_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      code_switch_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(amount_ != nullptr);
      amount_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&quantity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preserve_order_) -
        reinterpret_cast<char*>(&quantity_)) + sizeof(preserve_order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Money::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .speech.sparrowhawk.Decimal amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string currency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Money.currency");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 style = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_style(&has_bits);
          style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string morphosyntactic_features = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_morphosyntactic_features();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Money.morphosyntactic_features");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool preserve_order = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_preserve_order(&has_bits);
          preserve_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string code_switch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_code_switch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Money.code_switch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string field_order = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field_order();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Money.field_order");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Money::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Money)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .speech.sparrowhawk.Decimal amount = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::amount(this), target, stream);
  }

  // optional int64 quantity = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_quantity(), target);
  }

  // required string currency = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Money.currency");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_currency(), target);
  }

  // optional int32 style = 4 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_style(), target);
  }

  // optional string morphosyntactic_features = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_morphosyntactic_features().data(), static_cast<int>(this->_internal_morphosyntactic_features().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Money.morphosyntactic_features");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_preserve_order(), target);
  }

  // optional string code_switch = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code_switch().data(), static_cast<int>(this->_internal_code_switch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Money.code_switch");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_code_switch(), target);
  }

  // repeated string field_order = 8;
  for (int i = 0, n = this->_internal_field_order_size(); i < n; i++) {
    const auto& s = this->_internal_field_order(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Money.field_order");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Money)
  return target;
}

size_t Money::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:speech.sparrowhawk.Money)
  size_t total_size = 0;

  if (_internal_has_currency()) {
    // required string currency = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  if (_internal_has_amount()) {
    // required .speech.sparrowhawk.Decimal amount = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  return total_size;
}
size_t Money::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Money)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string currency = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());

    // required .speech.sparrowhawk.Decimal amount = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string field_order = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_order_.size());
  for (int i = 0, n = field_order_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      field_order_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string morphosyntactic_features = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_morphosyntactic_features());
    }

    // optional string code_switch = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code_switch());
    }

  }
  if (cached_has_bits & 0x00000070u) {
    // optional int64 quantity = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_quantity());
    }

    // optional int32 style = 4 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_style());
    }

    // optional bool preserve_order = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Money::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Money)
  GOOGLE_DCHECK_NE(&from, this);
  const Money* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Money>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Money)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Money)
    MergeFrom(*source);
  }
}

void Money::MergeFrom(const Money& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Money)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_currency(from._internal_currency());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_morphosyntactic_features(from._internal_morphosyntactic_features());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_code_switch(from._internal_code_switch());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_amount()->::speech::sparrowhawk::Decimal::MergeFrom(from._internal_amount());
    }
    if (cached_has_bits & 0x00000010u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000020u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000040u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Money::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Money)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Money::CopyFrom(const Money& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Money)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Money::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Money::InternalSwap(Money* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_order_.InternalSwap(&other->field_order_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_switch_.Swap(&other->code_switch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Money, preserve_order_)
      + sizeof(Money::preserve_order_)
      - PROTOBUF_FIELD_OFFSET(Money, amount_)>(
          reinterpret_cast<char*>(&amount_),
          reinterpret_cast<char*>(&other->amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Money::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Telephone::_Internal {
 public:
  using HasBits = decltype(std::declval<Telephone>()._has_bits_);
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_morphosyntactic_features(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preserve_order(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_code_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Telephone::Telephone(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  number_part_(arena),
  field_order_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.Telephone)
}
Telephone::Telephone(const Telephone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      number_part_(from.number_part_),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArena());
  }
  extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_extension()) {
    extension_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extension(), 
      GetArena());
  }
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_morphosyntactic_features()) {
    morphosyntactic_features_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_morphosyntactic_features(), 
      GetArena());
  }
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code_switch()) {
    code_switch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code_switch(), 
      GetArena());
  }
  ::memcpy(&style_, &from.style_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
    reinterpret_cast<char*>(&style_)) + sizeof(preserve_order_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Telephone)
}

void Telephone::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Telephone_semiotic_5fclasses_2eproto.base);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&style_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
      reinterpret_cast<char*>(&style_)) + sizeof(preserve_order_));
}

Telephone::~Telephone() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Telephone)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Telephone::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Telephone::ArenaDtor(void* object) {
  Telephone* _this = reinterpret_cast< Telephone* >(object);
  (void)_this;
}
void Telephone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Telephone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Telephone& Telephone::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Telephone_semiotic_5fclasses_2eproto.base);
  return *internal_default_instance();
}


void Telephone::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Telephone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_part_.Clear();
  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      extension_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      morphosyntactic_features_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      code_switch_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preserve_order_) -
        reinterpret_cast<char*>(&style_)) + sizeof(preserve_order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Telephone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string country_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Telephone.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string number_part = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_number_part();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Telephone.number_part");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string extension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_extension();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Telephone.extension");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 style = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_style(&has_bits);
          style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string morphosyntactic_features = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_morphosyntactic_features();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Telephone.morphosyntactic_features");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool preserve_order = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_preserve_order(&has_bits);
          preserve_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string code_switch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_code_switch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Telephone.code_switch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string field_order = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field_order();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Telephone.field_order");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Telephone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Telephone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.country_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country_code(), target);
  }

  // repeated string number_part = 2;
  for (int i = 0, n = this->_internal_number_part_size(); i < n; i++) {
    const auto& s = this->_internal_number_part(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.number_part");
    target = stream->WriteString(2, s, target);
  }

  // optional string extension = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_extension().data(), static_cast<int>(this->_internal_extension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.extension");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_extension(), target);
  }

  // optional int32 style = 4 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_style(), target);
  }

  // optional string morphosyntactic_features = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_morphosyntactic_features().data(), static_cast<int>(this->_internal_morphosyntactic_features().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.morphosyntactic_features");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_preserve_order(), target);
  }

  // optional string code_switch = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code_switch().data(), static_cast<int>(this->_internal_code_switch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.code_switch");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_code_switch(), target);
  }

  // repeated string field_order = 8;
  for (int i = 0, n = this->_internal_field_order_size(); i < n; i++) {
    const auto& s = this->_internal_field_order(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.field_order");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Telephone)
  return target;
}

size_t Telephone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Telephone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string number_part = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(number_part_.size());
  for (int i = 0, n = number_part_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      number_part_.Get(i));
  }

  // repeated string field_order = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_order_.size());
  for (int i = 0, n = field_order_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      field_order_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string country_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string extension = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_extension());
    }

    // optional string morphosyntactic_features = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_morphosyntactic_features());
    }

    // optional string code_switch = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code_switch());
    }

    // optional int32 style = 4 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_style());
    }

    // optional bool preserve_order = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Telephone::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Telephone)
  GOOGLE_DCHECK_NE(&from, this);
  const Telephone* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Telephone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Telephone)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Telephone)
    MergeFrom(*source);
  }
}

void Telephone::MergeFrom(const Telephone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Telephone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  number_part_.MergeFrom(from.number_part_);
  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_extension(from._internal_extension());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_morphosyntactic_features(from._internal_morphosyntactic_features());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_code_switch(from._internal_code_switch());
    }
    if (cached_has_bits & 0x00000010u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000020u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Telephone::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Telephone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telephone::CopyFrom(const Telephone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Telephone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telephone::IsInitialized() const {
  return true;
}

void Telephone::InternalSwap(Telephone* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  number_part_.InternalSwap(&other->number_part_);
  field_order_.InternalSwap(&other->field_order_);
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  extension_.Swap(&other->extension_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_switch_.Swap(&other->code_switch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Telephone, preserve_order_)
      + sizeof(Telephone::preserve_order_)
      - PROTOBUF_FIELD_OFFSET(Telephone, style_)>(
          reinterpret_cast<char*>(&style_),
          reinterpret_cast<char*>(&other->style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Telephone::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Electronic::_Internal {
 public:
  using HasBits = decltype(std::declval<Electronic>()._has_bits_);
  static void set_has_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_query_string(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fragment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_morphosyntactic_features(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_preserve_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_code_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

Electronic::Electronic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  field_order_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.Electronic)
}
Electronic::Electronic(const Electronic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_protocol()) {
    protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol(), 
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_domain()) {
    domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain(), 
      GetArena());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  query_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_query_string()) {
    query_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query_string(), 
      GetArena());
  }
  fragment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fragment_id()) {
    fragment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fragment_id(), 
      GetArena());
  }
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_morphosyntactic_features()) {
    morphosyntactic_features_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_morphosyntactic_features(), 
      GetArena());
  }
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code_switch()) {
    code_switch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code_switch(), 
      GetArena());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
    reinterpret_cast<char*>(&port_)) + sizeof(preserve_order_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Electronic)
}

void Electronic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Electronic_semiotic_5fclasses_2eproto.base);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fragment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
      reinterpret_cast<char*>(&port_)) + sizeof(preserve_order_));
}

Electronic::~Electronic() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Electronic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Electronic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fragment_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Electronic::ArenaDtor(void* object) {
  Electronic* _this = reinterpret_cast< Electronic* >(object);
  (void)_this;
}
void Electronic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Electronic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Electronic& Electronic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Electronic_semiotic_5fclasses_2eproto.base);
  return *internal_default_instance();
}


void Electronic::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Electronic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      protocol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      query_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      fragment_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      morphosyntactic_features_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    code_switch_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000600u) {
    ::memset(&port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preserve_order_) -
        reinterpret_cast<char*>(&port_)) + sizeof(preserve_order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Electronic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Electronic.protocol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Electronic.username");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Electronic.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string domain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Electronic.domain");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Electronic.path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string query_string = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_query_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Electronic.query_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fragment_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_fragment_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Electronic.fragment_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string morphosyntactic_features = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_morphosyntactic_features();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Electronic.morphosyntactic_features");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool preserve_order = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_preserve_order(&has_bits);
          preserve_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string code_switch = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_code_switch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Electronic.code_switch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string field_order = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field_order();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Electronic.field_order");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Electronic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Electronic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string protocol = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.protocol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol(), target);
  }

  // optional string username = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // optional string domain = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.domain");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_domain(), target);
  }

  // optional int32 port = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_port(), target);
  }

  // optional string path = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.path");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_path(), target);
  }

  // optional string query_string = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_query_string().data(), static_cast<int>(this->_internal_query_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.query_string");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_query_string(), target);
  }

  // optional string fragment_id = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fragment_id().data(), static_cast<int>(this->_internal_fragment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.fragment_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_fragment_id(), target);
  }

  // optional string morphosyntactic_features = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_morphosyntactic_features().data(), static_cast<int>(this->_internal_morphosyntactic_features().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.morphosyntactic_features");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_preserve_order(), target);
  }

  // optional string code_switch = 11;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code_switch().data(), static_cast<int>(this->_internal_code_switch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.code_switch");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_code_switch(), target);
  }

  // repeated string field_order = 12;
  for (int i = 0, n = this->_internal_field_order_size(); i < n; i++) {
    const auto& s = this->_internal_field_order(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.field_order");
    target = stream->WriteString(12, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Electronic)
  return target;
}

size_t Electronic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Electronic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string field_order = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_order_.size());
  for (int i = 0, n = field_order_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      field_order_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string protocol = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_protocol());
    }

    // optional string username = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional string password = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional string domain = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain());
    }

    // optional string path = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional string query_string = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_query_string());
    }

    // optional string fragment_id = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fragment_id());
    }

    // optional string morphosyntactic_features = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_morphosyntactic_features());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional string code_switch = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code_switch());
    }

    // optional int32 port = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port());
    }

    // optional bool preserve_order = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Electronic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Electronic)
  GOOGLE_DCHECK_NE(&from, this);
  const Electronic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Electronic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Electronic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Electronic)
    MergeFrom(*source);
  }
}

void Electronic::MergeFrom(const Electronic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Electronic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_protocol(from._internal_protocol());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_query_string(from._internal_query_string());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_fragment_id(from._internal_fragment_id());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_morphosyntactic_features(from._internal_morphosyntactic_features());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_code_switch(from._internal_code_switch());
    }
    if (cached_has_bits & 0x00000200u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000400u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Electronic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Electronic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Electronic::CopyFrom(const Electronic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Electronic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Electronic::IsInitialized() const {
  return true;
}

void Electronic::InternalSwap(Electronic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_order_.InternalSwap(&other->field_order_);
  protocol_.Swap(&other->protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_.Swap(&other->domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  query_string_.Swap(&other->query_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fragment_id_.Swap(&other->fragment_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_switch_.Swap(&other->code_switch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Electronic, preserve_order_)
      + sizeof(Electronic::preserve_order_)
      - PROTOBUF_FIELD_OFFSET(Electronic, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Electronic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Connector::_Internal {
 public:
  using HasBits = decltype(std::declval<Connector>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_morphosyntactic_features(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_code_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Connector::Connector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.Connector)
}
Connector::Connector(const Connector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_morphosyntactic_features()) {
    morphosyntactic_features_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_morphosyntactic_features(), 
      GetArena());
  }
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code_switch()) {
    code_switch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code_switch(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Connector)
}

void Connector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Connector_semiotic_5fclasses_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Connector::~Connector() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Connector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Connector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Connector::ArenaDtor(void* object) {
  Connector* _this = reinterpret_cast< Connector* >(object);
  (void)_this;
}
void Connector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Connector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Connector& Connector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Connector_semiotic_5fclasses_2eproto.base);
  return *internal_default_instance();
}


void Connector::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Connector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      morphosyntactic_features_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      code_switch_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Connector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Connector.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string morphosyntactic_features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_morphosyntactic_features();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Connector.morphosyntactic_features");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string code_switch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_code_switch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Connector.code_switch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Connector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Connector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Connector.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional string morphosyntactic_features = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_morphosyntactic_features().data(), static_cast<int>(this->_internal_morphosyntactic_features().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Connector.morphosyntactic_features");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_morphosyntactic_features(), target);
  }

  // optional string code_switch = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code_switch().data(), static_cast<int>(this->_internal_code_switch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Connector.code_switch");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code_switch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Connector)
  return target;
}

size_t Connector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Connector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string morphosyntactic_features = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_morphosyntactic_features());
    }

    // optional string code_switch = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code_switch());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Connector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Connector)
  GOOGLE_DCHECK_NE(&from, this);
  const Connector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Connector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Connector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Connector)
    MergeFrom(*source);
  }
}

void Connector::MergeFrom(const Connector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Connector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_morphosyntactic_features(from._internal_morphosyntactic_features());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_code_switch(from._internal_code_switch());
    }
  }
}

void Connector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Connector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connector::CopyFrom(const Connector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Connector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connector::IsInitialized() const {
  return true;
}

void Connector::InternalSwap(Connector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_switch_.Swap(&other->code_switch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Connector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Abbreviation::_Internal {
 public:
  using HasBits = decltype(std::declval<Abbreviation>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_morphosyntactic_features(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_code_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Abbreviation::Abbreviation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.Abbreviation)
}
Abbreviation::Abbreviation(const Abbreviation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_morphosyntactic_features()) {
    morphosyntactic_features_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_morphosyntactic_features(), 
      GetArena());
  }
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code_switch()) {
    code_switch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code_switch(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Abbreviation)
}

void Abbreviation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Abbreviation_semiotic_5fclasses_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Abbreviation::~Abbreviation() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Abbreviation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Abbreviation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Abbreviation::ArenaDtor(void* object) {
  Abbreviation* _this = reinterpret_cast< Abbreviation* >(object);
  (void)_this;
}
void Abbreviation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Abbreviation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Abbreviation& Abbreviation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Abbreviation_semiotic_5fclasses_2eproto.base);
  return *internal_default_instance();
}


void Abbreviation::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Abbreviation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      morphosyntactic_features_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      code_switch_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Abbreviation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Abbreviation.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string morphosyntactic_features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_morphosyntactic_features();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Abbreviation.morphosyntactic_features");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string code_switch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_code_switch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.Abbreviation.code_switch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Abbreviation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Abbreviation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Abbreviation.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // optional string morphosyntactic_features = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_morphosyntactic_features().data(), static_cast<int>(this->_internal_morphosyntactic_features().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Abbreviation.morphosyntactic_features");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_morphosyntactic_features(), target);
  }

  // optional string code_switch = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code_switch().data(), static_cast<int>(this->_internal_code_switch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Abbreviation.code_switch");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code_switch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Abbreviation)
  return target;
}

size_t Abbreviation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Abbreviation)
  size_t total_size = 0;

  // required string text = 1;
  if (_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string morphosyntactic_features = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_morphosyntactic_features());
    }

    // optional string code_switch = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code_switch());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Abbreviation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Abbreviation)
  GOOGLE_DCHECK_NE(&from, this);
  const Abbreviation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Abbreviation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Abbreviation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Abbreviation)
    MergeFrom(*source);
  }
}

void Abbreviation::MergeFrom(const Abbreviation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Abbreviation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_morphosyntactic_features(from._internal_morphosyntactic_features());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_code_switch(from._internal_code_switch());
    }
  }
}

void Abbreviation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Abbreviation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Abbreviation::CopyFrom(const Abbreviation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Abbreviation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Abbreviation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Abbreviation::InternalSwap(Abbreviation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_switch_.Swap(&other->code_switch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Abbreviation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sparrowhawk
}  // namespace speech
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::Cardinal* Arena::CreateMaybeMessage< ::speech::sparrowhawk::Cardinal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::Cardinal >(arena);
}
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::Ordinal* Arena::CreateMaybeMessage< ::speech::sparrowhawk::Ordinal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::Ordinal >(arena);
}
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::Fraction* Arena::CreateMaybeMessage< ::speech::sparrowhawk::Fraction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::Fraction >(arena);
}
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::Time* Arena::CreateMaybeMessage< ::speech::sparrowhawk::Time >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::Time >(arena);
}
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::Decimal* Arena::CreateMaybeMessage< ::speech::sparrowhawk::Decimal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::Decimal >(arena);
}
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::Measure* Arena::CreateMaybeMessage< ::speech::sparrowhawk::Measure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::Measure >(arena);
}
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::Date* Arena::CreateMaybeMessage< ::speech::sparrowhawk::Date >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::Date >(arena);
}
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::Money* Arena::CreateMaybeMessage< ::speech::sparrowhawk::Money >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::Money >(arena);
}
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::Telephone* Arena::CreateMaybeMessage< ::speech::sparrowhawk::Telephone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::Telephone >(arena);
}
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::Electronic* Arena::CreateMaybeMessage< ::speech::sparrowhawk::Electronic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::Electronic >(arena);
}
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::Connector* Arena::CreateMaybeMessage< ::speech::sparrowhawk::Connector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::Connector >(arena);
}
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::Abbreviation* Arena::CreateMaybeMessage< ::speech::sparrowhawk::Abbreviation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::Abbreviation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

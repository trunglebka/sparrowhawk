// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: links.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_links_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_links_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_links_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_links_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_links_2eproto;
namespace speech {
namespace sparrowhawk {
class Links;
class LinksDefaultTypeInternal;
extern LinksDefaultTypeInternal _Links_default_instance_;
}  // namespace sparrowhawk
}  // namespace speech
PROTOBUF_NAMESPACE_OPEN
template<> ::speech::sparrowhawk::Links* Arena::CreateMaybeMessage<::speech::sparrowhawk::Links>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace speech {
namespace sparrowhawk {

// ===================================================================

class Links PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speech.sparrowhawk.Links) */ {
 public:
  inline Links() : Links(nullptr) {}
  virtual ~Links();

  Links(const Links& from);
  Links(Links&& from) noexcept
    : Links() {
    *this = ::std::move(from);
  }

  inline Links& operator=(const Links& from) {
    CopyFrom(from);
    return *this;
  }
  inline Links& operator=(Links&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Links& default_instance();

  static inline const Links* internal_default_instance() {
    return reinterpret_cast<const Links*>(
               &_Links_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Links& a, Links& b) {
    a.Swap(&b);
  }
  inline void Swap(Links* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Links* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Links* New() const final {
    return CreateMaybeMessage<Links>(nullptr);
  }

  Links* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Links>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Links& from);
  void MergeFrom(const Links& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Links* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speech.sparrowhawk.Links";
  }
  protected:
  explicit Links(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_links_2eproto);
    return ::descriptor_table_links_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnIndexFieldNumber = 1,
    kParentFieldNumber = 2,
    kFirstChildFieldNumber = 3,
    kLastChildFieldNumber = 4,
  };
  // optional int32 own_index = 1;
  bool has_own_index() const;
  private:
  bool _internal_has_own_index() const;
  public:
  void clear_own_index();
  ::PROTOBUF_NAMESPACE_ID::int32 own_index() const;
  void set_own_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_own_index() const;
  void _internal_set_own_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 parent = 2;
  bool has_parent() const;
  private:
  bool _internal_has_parent() const;
  public:
  void clear_parent();
  ::PROTOBUF_NAMESPACE_ID::int32 parent() const;
  void set_parent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parent() const;
  void _internal_set_parent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 first_child = 3;
  bool has_first_child() const;
  private:
  bool _internal_has_first_child() const;
  public:
  void clear_first_child();
  ::PROTOBUF_NAMESPACE_ID::int32 first_child() const;
  void set_first_child(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_first_child() const;
  void _internal_set_first_child(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 last_child = 4;
  bool has_last_child() const;
  private:
  bool _internal_has_last_child() const;
  public:
  void clear_last_child();
  ::PROTOBUF_NAMESPACE_ID::int32 last_child() const;
  void set_last_child(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_child() const;
  void _internal_set_last_child(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:speech.sparrowhawk.Links)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 own_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 parent_;
  ::PROTOBUF_NAMESPACE_ID::int32 first_child_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_child_;
  friend struct ::TableStruct_links_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Links

// optional int32 own_index = 1;
inline bool Links::_internal_has_own_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Links::has_own_index() const {
  return _internal_has_own_index();
}
inline void Links::clear_own_index() {
  own_index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Links::_internal_own_index() const {
  return own_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Links::own_index() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.Links.own_index)
  return _internal_own_index();
}
inline void Links::_internal_set_own_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  own_index_ = value;
}
inline void Links::set_own_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_own_index(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.Links.own_index)
}

// optional int32 parent = 2;
inline bool Links::_internal_has_parent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Links::has_parent() const {
  return _internal_has_parent();
}
inline void Links::clear_parent() {
  parent_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Links::_internal_parent() const {
  return parent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Links::parent() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.Links.parent)
  return _internal_parent();
}
inline void Links::_internal_set_parent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  parent_ = value;
}
inline void Links::set_parent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.Links.parent)
}

// optional int32 first_child = 3;
inline bool Links::_internal_has_first_child() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Links::has_first_child() const {
  return _internal_has_first_child();
}
inline void Links::clear_first_child() {
  first_child_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Links::_internal_first_child() const {
  return first_child_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Links::first_child() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.Links.first_child)
  return _internal_first_child();
}
inline void Links::_internal_set_first_child(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  first_child_ = value;
}
inline void Links::set_first_child(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_first_child(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.Links.first_child)
}

// optional int32 last_child = 4;
inline bool Links::_internal_has_last_child() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Links::has_last_child() const {
  return _internal_has_last_child();
}
inline void Links::clear_last_child() {
  last_child_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Links::_internal_last_child() const {
  return last_child_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Links::last_child() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.Links.last_child)
  return _internal_last_child();
}
inline void Links::_internal_set_last_child(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  last_child_ = value;
}
inline void Links::set_last_child(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_child(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.Links.last_child)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sparrowhawk
}  // namespace speech

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_links_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialization_spec.proto

#include "serialization_spec.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_serialization_5fspec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassSpec_serialization_5fspec_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serialization_5fspec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordSpec_serialization_5fspec_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_serialization_5fspec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StyleSpec_serialization_5fspec_2eproto;
namespace speech {
namespace sparrowhawk {
class RecordSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordSpec> _instance;
} _RecordSpec_default_instance_;
class StyleSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StyleSpec> _instance;
} _StyleSpec_default_instance_;
class ClassSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassSpec> _instance;
} _ClassSpec_default_instance_;
class SerializeSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializeSpec> _instance;
} _SerializeSpec_default_instance_;
}  // namespace sparrowhawk
}  // namespace speech
static void InitDefaultsscc_info_ClassSpec_serialization_5fspec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_ClassSpec_default_instance_;
    new (ptr) ::speech::sparrowhawk::ClassSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassSpec_serialization_5fspec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClassSpec_serialization_5fspec_2eproto}, {
      &scc_info_StyleSpec_serialization_5fspec_2eproto.base,}};

static void InitDefaultsscc_info_RecordSpec_serialization_5fspec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_RecordSpec_default_instance_;
    new (ptr) ::speech::sparrowhawk::RecordSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordSpec_serialization_5fspec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecordSpec_serialization_5fspec_2eproto}, {}};

static void InitDefaultsscc_info_SerializeSpec_serialization_5fspec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_SerializeSpec_default_instance_;
    new (ptr) ::speech::sparrowhawk::SerializeSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializeSpec_serialization_5fspec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SerializeSpec_serialization_5fspec_2eproto}, {
      &scc_info_ClassSpec_serialization_5fspec_2eproto.base,}};

static void InitDefaultsscc_info_StyleSpec_serialization_5fspec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::speech::sparrowhawk::_StyleSpec_default_instance_;
    new (ptr) ::speech::sparrowhawk::StyleSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StyleSpec_serialization_5fspec_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StyleSpec_serialization_5fspec_2eproto}, {
      &scc_info_RecordSpec_serialization_5fspec_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_serialization_5fspec_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_serialization_5fspec_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_serialization_5fspec_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_serialization_5fspec_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::RecordSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::RecordSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::RecordSpec, prefix_spec_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::RecordSpec, suffix_spec_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::RecordSpec, field_path_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::RecordSpec, label_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::RecordSpec, default_value_),
  ~0u,
  ~0u,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::StyleSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::StyleSpec, record_spec_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::StyleSpec, required_fields_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::StyleSpec, prohibited_fields_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::ClassSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::ClassSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::ClassSpec, semiotic_class_),
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::ClassSpec, style_spec_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::SerializeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::speech::sparrowhawk::SerializeSpec, class_spec_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::speech::sparrowhawk::RecordSpec)},
  { 15, -1, sizeof(::speech::sparrowhawk::StyleSpec)},
  { 23, 30, sizeof(::speech::sparrowhawk::ClassSpec)},
  { 32, -1, sizeof(::speech::sparrowhawk::SerializeSpec)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_RecordSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_StyleSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_ClassSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::speech::sparrowhawk::_SerializeSpec_default_instance_),
};

const char descriptor_table_protodef_serialization_5fspec_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030serialization_spec.proto\022\022speech.sparr"
  "owhawk\"\260\001\n\nRecordSpec\0223\n\013prefix_spec\030\001 \003"
  "(\0132\036.speech.sparrowhawk.RecordSpec\0223\n\013su"
  "ffix_spec\030\002 \003(\0132\036.speech.sparrowhawk.Rec"
  "ordSpec\022\022\n\nfield_path\030\003 \001(\t\022\r\n\005label\030\004 \001"
  "(\t\022\025\n\rdefault_value\030\005 \001(\t\"t\n\tStyleSpec\0223"
  "\n\013record_spec\030\001 \003(\0132\036.speech.sparrowhawk"
  ".RecordSpec\022\027\n\017required_fields\030\002 \003(\t\022\031\n\021"
  "prohibited_fields\030\003 \003(\t\"V\n\tClassSpec\022\026\n\016"
  "semiotic_class\030\001 \001(\t\0221\n\nstyle_spec\030\002 \003(\013"
  "2\035.speech.sparrowhawk.StyleSpec\"B\n\rSeria"
  "lizeSpec\0221\n\nclass_spec\030\001 \003(\0132\035.speech.sp"
  "arrowhawk.ClassSpec"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_serialization_5fspec_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_serialization_5fspec_2eproto_sccs[4] = {
  &scc_info_ClassSpec_serialization_5fspec_2eproto.base,
  &scc_info_RecordSpec_serialization_5fspec_2eproto.base,
  &scc_info_SerializeSpec_serialization_5fspec_2eproto.base,
  &scc_info_StyleSpec_serialization_5fspec_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_serialization_5fspec_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_serialization_5fspec_2eproto = {
  false, false, descriptor_table_protodef_serialization_5fspec_2eproto, "serialization_spec.proto", 499,
  &descriptor_table_serialization_5fspec_2eproto_once, descriptor_table_serialization_5fspec_2eproto_sccs, descriptor_table_serialization_5fspec_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_serialization_5fspec_2eproto::offsets,
  file_level_metadata_serialization_5fspec_2eproto, 4, file_level_enum_descriptors_serialization_5fspec_2eproto, file_level_service_descriptors_serialization_5fspec_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_serialization_5fspec_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_serialization_5fspec_2eproto)), true);
namespace speech {
namespace sparrowhawk {

// ===================================================================

class RecordSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordSpec>()._has_bits_);
  static void set_has_field_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_default_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RecordSpec::RecordSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  prefix_spec_(arena),
  suffix_spec_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.RecordSpec)
}
RecordSpec::RecordSpec(const RecordSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      prefix_spec_(from.prefix_spec_),
      suffix_spec_(from.suffix_spec_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field_path()) {
    field_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field_path(), 
      GetArena());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  default_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_default_value()) {
    default_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_default_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.RecordSpec)
}

void RecordSpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordSpec_serialization_5fspec_2eproto.base);
  field_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RecordSpec::~RecordSpec() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.RecordSpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  field_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecordSpec::ArenaDtor(void* object) {
  RecordSpec* _this = reinterpret_cast< RecordSpec* >(object);
  (void)_this;
}
void RecordSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordSpec& RecordSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordSpec_serialization_5fspec_2eproto.base);
  return *internal_default_instance();
}


void RecordSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.RecordSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_spec_.Clear();
  suffix_spec_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      field_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      default_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .speech.sparrowhawk.RecordSpec prefix_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prefix_spec(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .speech.sparrowhawk.RecordSpec suffix_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_suffix_spec(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string field_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_field_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.RecordSpec.field_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.RecordSpec.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string default_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_default_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.RecordSpec.default_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.RecordSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speech.sparrowhawk.RecordSpec prefix_spec = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prefix_spec_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_prefix_spec(i), target, stream);
  }

  // repeated .speech.sparrowhawk.RecordSpec suffix_spec = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_suffix_spec_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_suffix_spec(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string field_path = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field_path().data(), static_cast<int>(this->_internal_field_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.RecordSpec.field_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_field_path(), target);
  }

  // optional string label = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.RecordSpec.label");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_label(), target);
  }

  // optional string default_value = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_default_value().data(), static_cast<int>(this->_internal_default_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.RecordSpec.default_value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_default_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.RecordSpec)
  return target;
}

size_t RecordSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.RecordSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speech.sparrowhawk.RecordSpec prefix_spec = 1;
  total_size += 1UL * this->_internal_prefix_spec_size();
  for (const auto& msg : this->prefix_spec_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .speech.sparrowhawk.RecordSpec suffix_spec = 2;
  total_size += 1UL * this->_internal_suffix_spec_size();
  for (const auto& msg : this->suffix_spec_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string field_path = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field_path());
    }

    // optional string label = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional string default_value = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.RecordSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.RecordSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.RecordSpec)
    MergeFrom(*source);
  }
}

void RecordSpec::MergeFrom(const RecordSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.RecordSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prefix_spec_.MergeFrom(from.prefix_spec_);
  suffix_spec_.MergeFrom(from.suffix_spec_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_field_path(from._internal_field_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_default_value(from._internal_default_value());
    }
  }
}

void RecordSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.RecordSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordSpec::CopyFrom(const RecordSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.RecordSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordSpec::IsInitialized() const {
  return true;
}

void RecordSpec::InternalSwap(RecordSpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  prefix_spec_.InternalSwap(&other->prefix_spec_);
  suffix_spec_.InternalSwap(&other->suffix_spec_);
  field_path_.Swap(&other->field_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  default_value_.Swap(&other->default_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StyleSpec::_Internal {
 public:
};

StyleSpec::StyleSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  record_spec_(arena),
  required_fields_(arena),
  prohibited_fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.StyleSpec)
}
StyleSpec::StyleSpec(const StyleSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      record_spec_(from.record_spec_),
      required_fields_(from.required_fields_),
      prohibited_fields_(from.prohibited_fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.StyleSpec)
}

void StyleSpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StyleSpec_serialization_5fspec_2eproto.base);
}

StyleSpec::~StyleSpec() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.StyleSpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StyleSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StyleSpec::ArenaDtor(void* object) {
  StyleSpec* _this = reinterpret_cast< StyleSpec* >(object);
  (void)_this;
}
void StyleSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StyleSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StyleSpec& StyleSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StyleSpec_serialization_5fspec_2eproto.base);
  return *internal_default_instance();
}


void StyleSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.StyleSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_spec_.Clear();
  required_fields_.Clear();
  prohibited_fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .speech.sparrowhawk.RecordSpec record_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_spec(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string required_fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_required_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.StyleSpec.required_fields");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string prohibited_fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_prohibited_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.StyleSpec.prohibited_fields");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.StyleSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speech.sparrowhawk.RecordSpec record_spec = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_spec_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_record_spec(i), target, stream);
  }

  // repeated string required_fields = 2;
  for (int i = 0, n = this->_internal_required_fields_size(); i < n; i++) {
    const auto& s = this->_internal_required_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.StyleSpec.required_fields");
    target = stream->WriteString(2, s, target);
  }

  // repeated string prohibited_fields = 3;
  for (int i = 0, n = this->_internal_prohibited_fields_size(); i < n; i++) {
    const auto& s = this->_internal_prohibited_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.StyleSpec.prohibited_fields");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.StyleSpec)
  return target;
}

size_t StyleSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.StyleSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speech.sparrowhawk.RecordSpec record_spec = 1;
  total_size += 1UL * this->_internal_record_spec_size();
  for (const auto& msg : this->record_spec_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string required_fields = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(required_fields_.size());
  for (int i = 0, n = required_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      required_fields_.Get(i));
  }

  // repeated string prohibited_fields = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(prohibited_fields_.size());
  for (int i = 0, n = prohibited_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      prohibited_fields_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyleSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.StyleSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyleSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.StyleSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.StyleSpec)
    MergeFrom(*source);
  }
}

void StyleSpec::MergeFrom(const StyleSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.StyleSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_spec_.MergeFrom(from.record_spec_);
  required_fields_.MergeFrom(from.required_fields_);
  prohibited_fields_.MergeFrom(from.prohibited_fields_);
}

void StyleSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.StyleSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleSpec::CopyFrom(const StyleSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.StyleSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleSpec::IsInitialized() const {
  return true;
}

void StyleSpec::InternalSwap(StyleSpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_spec_.InternalSwap(&other->record_spec_);
  required_fields_.InternalSwap(&other->required_fields_);
  prohibited_fields_.InternalSwap(&other->prohibited_fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClassSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassSpec>()._has_bits_);
  static void set_has_semiotic_class(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClassSpec::ClassSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  style_spec_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.ClassSpec)
}
ClassSpec::ClassSpec(const ClassSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      style_spec_(from.style_spec_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  semiotic_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_semiotic_class()) {
    semiotic_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_semiotic_class(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.ClassSpec)
}

void ClassSpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClassSpec_serialization_5fspec_2eproto.base);
  semiotic_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClassSpec::~ClassSpec() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.ClassSpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClassSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  semiotic_class_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClassSpec::ArenaDtor(void* object) {
  ClassSpec* _this = reinterpret_cast< ClassSpec* >(object);
  (void)_this;
}
void ClassSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClassSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassSpec& ClassSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassSpec_serialization_5fspec_2eproto.base);
  return *internal_default_instance();
}


void ClassSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.ClassSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  style_spec_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    semiotic_class_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string semiotic_class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_semiotic_class();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "speech.sparrowhawk.ClassSpec.semiotic_class");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .speech.sparrowhawk.StyleSpec style_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_style_spec(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.ClassSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string semiotic_class = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_semiotic_class().data(), static_cast<int>(this->_internal_semiotic_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.ClassSpec.semiotic_class");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_semiotic_class(), target);
  }

  // repeated .speech.sparrowhawk.StyleSpec style_spec = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_style_spec_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_style_spec(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.ClassSpec)
  return target;
}

size_t ClassSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.ClassSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speech.sparrowhawk.StyleSpec style_spec = 2;
  total_size += 1UL * this->_internal_style_spec_size();
  for (const auto& msg : this->style_spec_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string semiotic_class = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_semiotic_class());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.ClassSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.ClassSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.ClassSpec)
    MergeFrom(*source);
  }
}

void ClassSpec::MergeFrom(const ClassSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.ClassSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  style_spec_.MergeFrom(from.style_spec_);
  if (from._internal_has_semiotic_class()) {
    _internal_set_semiotic_class(from._internal_semiotic_class());
  }
}

void ClassSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.ClassSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassSpec::CopyFrom(const ClassSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.ClassSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassSpec::IsInitialized() const {
  return true;
}

void ClassSpec::InternalSwap(ClassSpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  style_spec_.InternalSwap(&other->style_spec_);
  semiotic_class_.Swap(&other->semiotic_class_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SerializeSpec::_Internal {
 public:
};

SerializeSpec::SerializeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  class_spec_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:speech.sparrowhawk.SerializeSpec)
}
SerializeSpec::SerializeSpec(const SerializeSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      class_spec_(from.class_spec_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.SerializeSpec)
}

void SerializeSpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializeSpec_serialization_5fspec_2eproto.base);
}

SerializeSpec::~SerializeSpec() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.SerializeSpec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializeSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SerializeSpec::ArenaDtor(void* object) {
  SerializeSpec* _this = reinterpret_cast< SerializeSpec* >(object);
  (void)_this;
}
void SerializeSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializeSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializeSpec& SerializeSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializeSpec_serialization_5fspec_2eproto.base);
  return *internal_default_instance();
}


void SerializeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.SerializeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_spec_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializeSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .speech.sparrowhawk.ClassSpec class_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_class_spec(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializeSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.SerializeSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .speech.sparrowhawk.ClassSpec class_spec = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_class_spec_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_class_spec(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.SerializeSpec)
  return target;
}

size_t SerializeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.SerializeSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .speech.sparrowhawk.ClassSpec class_spec = 1;
  total_size += 1UL * this->_internal_class_spec_size();
  for (const auto& msg : this->class_spec_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializeSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.SerializeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializeSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializeSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.SerializeSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.SerializeSpec)
    MergeFrom(*source);
  }
}

void SerializeSpec::MergeFrom(const SerializeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.SerializeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  class_spec_.MergeFrom(from.class_spec_);
}

void SerializeSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.SerializeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializeSpec::CopyFrom(const SerializeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.SerializeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializeSpec::IsInitialized() const {
  return true;
}

void SerializeSpec::InternalSwap(SerializeSpec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  class_spec_.InternalSwap(&other->class_spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializeSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sparrowhawk
}  // namespace speech
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::RecordSpec* Arena::CreateMaybeMessage< ::speech::sparrowhawk::RecordSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::RecordSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::StyleSpec* Arena::CreateMaybeMessage< ::speech::sparrowhawk::StyleSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::StyleSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::ClassSpec* Arena::CreateMaybeMessage< ::speech::sparrowhawk::ClassSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::ClassSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::speech::sparrowhawk::SerializeSpec* Arena::CreateMaybeMessage< ::speech::sparrowhawk::SerializeSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::speech::sparrowhawk::SerializeSpec >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

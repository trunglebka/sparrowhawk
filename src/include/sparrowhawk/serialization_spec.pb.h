// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialization_spec.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_serialization_5fspec_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_serialization_5fspec_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_serialization_5fspec_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_serialization_5fspec_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_serialization_5fspec_2eproto;
namespace speech {
namespace sparrowhawk {
class ClassSpec;
class ClassSpecDefaultTypeInternal;
extern ClassSpecDefaultTypeInternal _ClassSpec_default_instance_;
class RecordSpec;
class RecordSpecDefaultTypeInternal;
extern RecordSpecDefaultTypeInternal _RecordSpec_default_instance_;
class SerializeSpec;
class SerializeSpecDefaultTypeInternal;
extern SerializeSpecDefaultTypeInternal _SerializeSpec_default_instance_;
class StyleSpec;
class StyleSpecDefaultTypeInternal;
extern StyleSpecDefaultTypeInternal _StyleSpec_default_instance_;
}  // namespace sparrowhawk
}  // namespace speech
PROTOBUF_NAMESPACE_OPEN
template<> ::speech::sparrowhawk::ClassSpec* Arena::CreateMaybeMessage<::speech::sparrowhawk::ClassSpec>(Arena*);
template<> ::speech::sparrowhawk::RecordSpec* Arena::CreateMaybeMessage<::speech::sparrowhawk::RecordSpec>(Arena*);
template<> ::speech::sparrowhawk::SerializeSpec* Arena::CreateMaybeMessage<::speech::sparrowhawk::SerializeSpec>(Arena*);
template<> ::speech::sparrowhawk::StyleSpec* Arena::CreateMaybeMessage<::speech::sparrowhawk::StyleSpec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace speech {
namespace sparrowhawk {

// ===================================================================

class RecordSpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speech.sparrowhawk.RecordSpec) */ {
 public:
  inline RecordSpec() : RecordSpec(nullptr) {}
  virtual ~RecordSpec();

  RecordSpec(const RecordSpec& from);
  RecordSpec(RecordSpec&& from) noexcept
    : RecordSpec() {
    *this = ::std::move(from);
  }

  inline RecordSpec& operator=(const RecordSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordSpec& operator=(RecordSpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordSpec& default_instance();

  static inline const RecordSpec* internal_default_instance() {
    return reinterpret_cast<const RecordSpec*>(
               &_RecordSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecordSpec& a, RecordSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordSpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordSpec* New() const final {
    return CreateMaybeMessage<RecordSpec>(nullptr);
  }

  RecordSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordSpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordSpec& from);
  void MergeFrom(const RecordSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speech.sparrowhawk.RecordSpec";
  }
  protected:
  explicit RecordSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_5fspec_2eproto);
    return ::descriptor_table_serialization_5fspec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixSpecFieldNumber = 1,
    kSuffixSpecFieldNumber = 2,
    kFieldPathFieldNumber = 3,
    kLabelFieldNumber = 4,
    kDefaultValueFieldNumber = 5,
  };
  // repeated .speech.sparrowhawk.RecordSpec prefix_spec = 1;
  int prefix_spec_size() const;
  private:
  int _internal_prefix_spec_size() const;
  public:
  void clear_prefix_spec();
  ::speech::sparrowhawk::RecordSpec* mutable_prefix_spec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::RecordSpec >*
      mutable_prefix_spec();
  private:
  const ::speech::sparrowhawk::RecordSpec& _internal_prefix_spec(int index) const;
  ::speech::sparrowhawk::RecordSpec* _internal_add_prefix_spec();
  public:
  const ::speech::sparrowhawk::RecordSpec& prefix_spec(int index) const;
  ::speech::sparrowhawk::RecordSpec* add_prefix_spec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::RecordSpec >&
      prefix_spec() const;

  // repeated .speech.sparrowhawk.RecordSpec suffix_spec = 2;
  int suffix_spec_size() const;
  private:
  int _internal_suffix_spec_size() const;
  public:
  void clear_suffix_spec();
  ::speech::sparrowhawk::RecordSpec* mutable_suffix_spec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::RecordSpec >*
      mutable_suffix_spec();
  private:
  const ::speech::sparrowhawk::RecordSpec& _internal_suffix_spec(int index) const;
  ::speech::sparrowhawk::RecordSpec* _internal_add_suffix_spec();
  public:
  const ::speech::sparrowhawk::RecordSpec& suffix_spec(int index) const;
  ::speech::sparrowhawk::RecordSpec* add_suffix_spec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::RecordSpec >&
      suffix_spec() const;

  // optional string field_path = 3;
  bool has_field_path() const;
  private:
  bool _internal_has_field_path() const;
  public:
  void clear_field_path();
  const std::string& field_path() const;
  void set_field_path(const std::string& value);
  void set_field_path(std::string&& value);
  void set_field_path(const char* value);
  void set_field_path(const char* value, size_t size);
  std::string* mutable_field_path();
  std::string* release_field_path();
  void set_allocated_field_path(std::string* field_path);
  private:
  const std::string& _internal_field_path() const;
  void _internal_set_field_path(const std::string& value);
  std::string* _internal_mutable_field_path();
  public:

  // optional string label = 4;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional string default_value = 5;
  bool has_default_value() const;
  private:
  bool _internal_has_default_value() const;
  public:
  void clear_default_value();
  const std::string& default_value() const;
  void set_default_value(const std::string& value);
  void set_default_value(std::string&& value);
  void set_default_value(const char* value);
  void set_default_value(const char* value, size_t size);
  std::string* mutable_default_value();
  std::string* release_default_value();
  void set_allocated_default_value(std::string* default_value);
  private:
  const std::string& _internal_default_value() const;
  void _internal_set_default_value(const std::string& value);
  std::string* _internal_mutable_default_value();
  public:

  // @@protoc_insertion_point(class_scope:speech.sparrowhawk.RecordSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::RecordSpec > prefix_spec_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::RecordSpec > suffix_spec_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_value_;
  friend struct ::TableStruct_serialization_5fspec_2eproto;
};
// -------------------------------------------------------------------

class StyleSpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speech.sparrowhawk.StyleSpec) */ {
 public:
  inline StyleSpec() : StyleSpec(nullptr) {}
  virtual ~StyleSpec();

  StyleSpec(const StyleSpec& from);
  StyleSpec(StyleSpec&& from) noexcept
    : StyleSpec() {
    *this = ::std::move(from);
  }

  inline StyleSpec& operator=(const StyleSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleSpec& operator=(StyleSpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StyleSpec& default_instance();

  static inline const StyleSpec* internal_default_instance() {
    return reinterpret_cast<const StyleSpec*>(
               &_StyleSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StyleSpec& a, StyleSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleSpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleSpec* New() const final {
    return CreateMaybeMessage<StyleSpec>(nullptr);
  }

  StyleSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleSpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StyleSpec& from);
  void MergeFrom(const StyleSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speech.sparrowhawk.StyleSpec";
  }
  protected:
  explicit StyleSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_5fspec_2eproto);
    return ::descriptor_table_serialization_5fspec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordSpecFieldNumber = 1,
    kRequiredFieldsFieldNumber = 2,
    kProhibitedFieldsFieldNumber = 3,
  };
  // repeated .speech.sparrowhawk.RecordSpec record_spec = 1;
  int record_spec_size() const;
  private:
  int _internal_record_spec_size() const;
  public:
  void clear_record_spec();
  ::speech::sparrowhawk::RecordSpec* mutable_record_spec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::RecordSpec >*
      mutable_record_spec();
  private:
  const ::speech::sparrowhawk::RecordSpec& _internal_record_spec(int index) const;
  ::speech::sparrowhawk::RecordSpec* _internal_add_record_spec();
  public:
  const ::speech::sparrowhawk::RecordSpec& record_spec(int index) const;
  ::speech::sparrowhawk::RecordSpec* add_record_spec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::RecordSpec >&
      record_spec() const;

  // repeated string required_fields = 2;
  int required_fields_size() const;
  private:
  int _internal_required_fields_size() const;
  public:
  void clear_required_fields();
  const std::string& required_fields(int index) const;
  std::string* mutable_required_fields(int index);
  void set_required_fields(int index, const std::string& value);
  void set_required_fields(int index, std::string&& value);
  void set_required_fields(int index, const char* value);
  void set_required_fields(int index, const char* value, size_t size);
  std::string* add_required_fields();
  void add_required_fields(const std::string& value);
  void add_required_fields(std::string&& value);
  void add_required_fields(const char* value);
  void add_required_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& required_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_required_fields();
  private:
  const std::string& _internal_required_fields(int index) const;
  std::string* _internal_add_required_fields();
  public:

  // repeated string prohibited_fields = 3;
  int prohibited_fields_size() const;
  private:
  int _internal_prohibited_fields_size() const;
  public:
  void clear_prohibited_fields();
  const std::string& prohibited_fields(int index) const;
  std::string* mutable_prohibited_fields(int index);
  void set_prohibited_fields(int index, const std::string& value);
  void set_prohibited_fields(int index, std::string&& value);
  void set_prohibited_fields(int index, const char* value);
  void set_prohibited_fields(int index, const char* value, size_t size);
  std::string* add_prohibited_fields();
  void add_prohibited_fields(const std::string& value);
  void add_prohibited_fields(std::string&& value);
  void add_prohibited_fields(const char* value);
  void add_prohibited_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& prohibited_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_prohibited_fields();
  private:
  const std::string& _internal_prohibited_fields(int index) const;
  std::string* _internal_add_prohibited_fields();
  public:

  // @@protoc_insertion_point(class_scope:speech.sparrowhawk.StyleSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::RecordSpec > record_spec_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> required_fields_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> prohibited_fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_5fspec_2eproto;
};
// -------------------------------------------------------------------

class ClassSpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speech.sparrowhawk.ClassSpec) */ {
 public:
  inline ClassSpec() : ClassSpec(nullptr) {}
  virtual ~ClassSpec();

  ClassSpec(const ClassSpec& from);
  ClassSpec(ClassSpec&& from) noexcept
    : ClassSpec() {
    *this = ::std::move(from);
  }

  inline ClassSpec& operator=(const ClassSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassSpec& operator=(ClassSpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClassSpec& default_instance();

  static inline const ClassSpec* internal_default_instance() {
    return reinterpret_cast<const ClassSpec*>(
               &_ClassSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClassSpec& a, ClassSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassSpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClassSpec* New() const final {
    return CreateMaybeMessage<ClassSpec>(nullptr);
  }

  ClassSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClassSpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClassSpec& from);
  void MergeFrom(const ClassSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speech.sparrowhawk.ClassSpec";
  }
  protected:
  explicit ClassSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_5fspec_2eproto);
    return ::descriptor_table_serialization_5fspec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStyleSpecFieldNumber = 2,
    kSemioticClassFieldNumber = 1,
  };
  // repeated .speech.sparrowhawk.StyleSpec style_spec = 2;
  int style_spec_size() const;
  private:
  int _internal_style_spec_size() const;
  public:
  void clear_style_spec();
  ::speech::sparrowhawk::StyleSpec* mutable_style_spec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::StyleSpec >*
      mutable_style_spec();
  private:
  const ::speech::sparrowhawk::StyleSpec& _internal_style_spec(int index) const;
  ::speech::sparrowhawk::StyleSpec* _internal_add_style_spec();
  public:
  const ::speech::sparrowhawk::StyleSpec& style_spec(int index) const;
  ::speech::sparrowhawk::StyleSpec* add_style_spec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::StyleSpec >&
      style_spec() const;

  // optional string semiotic_class = 1;
  bool has_semiotic_class() const;
  private:
  bool _internal_has_semiotic_class() const;
  public:
  void clear_semiotic_class();
  const std::string& semiotic_class() const;
  void set_semiotic_class(const std::string& value);
  void set_semiotic_class(std::string&& value);
  void set_semiotic_class(const char* value);
  void set_semiotic_class(const char* value, size_t size);
  std::string* mutable_semiotic_class();
  std::string* release_semiotic_class();
  void set_allocated_semiotic_class(std::string* semiotic_class);
  private:
  const std::string& _internal_semiotic_class() const;
  void _internal_set_semiotic_class(const std::string& value);
  std::string* _internal_mutable_semiotic_class();
  public:

  // @@protoc_insertion_point(class_scope:speech.sparrowhawk.ClassSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::StyleSpec > style_spec_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr semiotic_class_;
  friend struct ::TableStruct_serialization_5fspec_2eproto;
};
// -------------------------------------------------------------------

class SerializeSpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:speech.sparrowhawk.SerializeSpec) */ {
 public:
  inline SerializeSpec() : SerializeSpec(nullptr) {}
  virtual ~SerializeSpec();

  SerializeSpec(const SerializeSpec& from);
  SerializeSpec(SerializeSpec&& from) noexcept
    : SerializeSpec() {
    *this = ::std::move(from);
  }

  inline SerializeSpec& operator=(const SerializeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializeSpec& operator=(SerializeSpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SerializeSpec& default_instance();

  static inline const SerializeSpec* internal_default_instance() {
    return reinterpret_cast<const SerializeSpec*>(
               &_SerializeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SerializeSpec& a, SerializeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializeSpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializeSpec* New() const final {
    return CreateMaybeMessage<SerializeSpec>(nullptr);
  }

  SerializeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializeSpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SerializeSpec& from);
  void MergeFrom(const SerializeSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializeSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "speech.sparrowhawk.SerializeSpec";
  }
  protected:
  explicit SerializeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_serialization_5fspec_2eproto);
    return ::descriptor_table_serialization_5fspec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassSpecFieldNumber = 1,
  };
  // repeated .speech.sparrowhawk.ClassSpec class_spec = 1;
  int class_spec_size() const;
  private:
  int _internal_class_spec_size() const;
  public:
  void clear_class_spec();
  ::speech::sparrowhawk::ClassSpec* mutable_class_spec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::ClassSpec >*
      mutable_class_spec();
  private:
  const ::speech::sparrowhawk::ClassSpec& _internal_class_spec(int index) const;
  ::speech::sparrowhawk::ClassSpec* _internal_add_class_spec();
  public:
  const ::speech::sparrowhawk::ClassSpec& class_spec(int index) const;
  ::speech::sparrowhawk::ClassSpec* add_class_spec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::ClassSpec >&
      class_spec() const;

  // @@protoc_insertion_point(class_scope:speech.sparrowhawk.SerializeSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::ClassSpec > class_spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_serialization_5fspec_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecordSpec

// repeated .speech.sparrowhawk.RecordSpec prefix_spec = 1;
inline int RecordSpec::_internal_prefix_spec_size() const {
  return prefix_spec_.size();
}
inline int RecordSpec::prefix_spec_size() const {
  return _internal_prefix_spec_size();
}
inline void RecordSpec::clear_prefix_spec() {
  prefix_spec_.Clear();
}
inline ::speech::sparrowhawk::RecordSpec* RecordSpec::mutable_prefix_spec(int index) {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.RecordSpec.prefix_spec)
  return prefix_spec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::RecordSpec >*
RecordSpec::mutable_prefix_spec() {
  // @@protoc_insertion_point(field_mutable_list:speech.sparrowhawk.RecordSpec.prefix_spec)
  return &prefix_spec_;
}
inline const ::speech::sparrowhawk::RecordSpec& RecordSpec::_internal_prefix_spec(int index) const {
  return prefix_spec_.Get(index);
}
inline const ::speech::sparrowhawk::RecordSpec& RecordSpec::prefix_spec(int index) const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.RecordSpec.prefix_spec)
  return _internal_prefix_spec(index);
}
inline ::speech::sparrowhawk::RecordSpec* RecordSpec::_internal_add_prefix_spec() {
  return prefix_spec_.Add();
}
inline ::speech::sparrowhawk::RecordSpec* RecordSpec::add_prefix_spec() {
  // @@protoc_insertion_point(field_add:speech.sparrowhawk.RecordSpec.prefix_spec)
  return _internal_add_prefix_spec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::RecordSpec >&
RecordSpec::prefix_spec() const {
  // @@protoc_insertion_point(field_list:speech.sparrowhawk.RecordSpec.prefix_spec)
  return prefix_spec_;
}

// repeated .speech.sparrowhawk.RecordSpec suffix_spec = 2;
inline int RecordSpec::_internal_suffix_spec_size() const {
  return suffix_spec_.size();
}
inline int RecordSpec::suffix_spec_size() const {
  return _internal_suffix_spec_size();
}
inline void RecordSpec::clear_suffix_spec() {
  suffix_spec_.Clear();
}
inline ::speech::sparrowhawk::RecordSpec* RecordSpec::mutable_suffix_spec(int index) {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.RecordSpec.suffix_spec)
  return suffix_spec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::RecordSpec >*
RecordSpec::mutable_suffix_spec() {
  // @@protoc_insertion_point(field_mutable_list:speech.sparrowhawk.RecordSpec.suffix_spec)
  return &suffix_spec_;
}
inline const ::speech::sparrowhawk::RecordSpec& RecordSpec::_internal_suffix_spec(int index) const {
  return suffix_spec_.Get(index);
}
inline const ::speech::sparrowhawk::RecordSpec& RecordSpec::suffix_spec(int index) const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.RecordSpec.suffix_spec)
  return _internal_suffix_spec(index);
}
inline ::speech::sparrowhawk::RecordSpec* RecordSpec::_internal_add_suffix_spec() {
  return suffix_spec_.Add();
}
inline ::speech::sparrowhawk::RecordSpec* RecordSpec::add_suffix_spec() {
  // @@protoc_insertion_point(field_add:speech.sparrowhawk.RecordSpec.suffix_spec)
  return _internal_add_suffix_spec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::RecordSpec >&
RecordSpec::suffix_spec() const {
  // @@protoc_insertion_point(field_list:speech.sparrowhawk.RecordSpec.suffix_spec)
  return suffix_spec_;
}

// optional string field_path = 3;
inline bool RecordSpec::_internal_has_field_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecordSpec::has_field_path() const {
  return _internal_has_field_path();
}
inline void RecordSpec::clear_field_path() {
  field_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RecordSpec::field_path() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.RecordSpec.field_path)
  return _internal_field_path();
}
inline void RecordSpec::set_field_path(const std::string& value) {
  _internal_set_field_path(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.RecordSpec.field_path)
}
inline std::string* RecordSpec::mutable_field_path() {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.RecordSpec.field_path)
  return _internal_mutable_field_path();
}
inline const std::string& RecordSpec::_internal_field_path() const {
  return field_path_.Get();
}
inline void RecordSpec::_internal_set_field_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  field_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecordSpec::set_field_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  field_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.RecordSpec.field_path)
}
inline void RecordSpec::set_field_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  field_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.RecordSpec.field_path)
}
inline void RecordSpec::set_field_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  field_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.RecordSpec.field_path)
}
inline std::string* RecordSpec::_internal_mutable_field_path() {
  _has_bits_[0] |= 0x00000001u;
  return field_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecordSpec::release_field_path() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.RecordSpec.field_path)
  if (!_internal_has_field_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return field_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordSpec::set_allocated_field_path(std::string* field_path) {
  if (field_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  field_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.RecordSpec.field_path)
}

// optional string label = 4;
inline bool RecordSpec::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RecordSpec::has_label() const {
  return _internal_has_label();
}
inline void RecordSpec::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RecordSpec::label() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.RecordSpec.label)
  return _internal_label();
}
inline void RecordSpec::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.RecordSpec.label)
}
inline std::string* RecordSpec::mutable_label() {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.RecordSpec.label)
  return _internal_mutable_label();
}
inline const std::string& RecordSpec::_internal_label() const {
  return label_.Get();
}
inline void RecordSpec::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecordSpec::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.RecordSpec.label)
}
inline void RecordSpec::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.RecordSpec.label)
}
inline void RecordSpec::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.RecordSpec.label)
}
inline std::string* RecordSpec::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000002u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecordSpec::release_label() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.RecordSpec.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordSpec::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.RecordSpec.label)
}

// optional string default_value = 5;
inline bool RecordSpec::_internal_has_default_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RecordSpec::has_default_value() const {
  return _internal_has_default_value();
}
inline void RecordSpec::clear_default_value() {
  default_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RecordSpec::default_value() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.RecordSpec.default_value)
  return _internal_default_value();
}
inline void RecordSpec::set_default_value(const std::string& value) {
  _internal_set_default_value(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.RecordSpec.default_value)
}
inline std::string* RecordSpec::mutable_default_value() {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.RecordSpec.default_value)
  return _internal_mutable_default_value();
}
inline const std::string& RecordSpec::_internal_default_value() const {
  return default_value_.Get();
}
inline void RecordSpec::_internal_set_default_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  default_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RecordSpec::set_default_value(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  default_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.RecordSpec.default_value)
}
inline void RecordSpec::set_default_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  default_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.RecordSpec.default_value)
}
inline void RecordSpec::set_default_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  default_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.RecordSpec.default_value)
}
inline std::string* RecordSpec::_internal_mutable_default_value() {
  _has_bits_[0] |= 0x00000004u;
  return default_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RecordSpec::release_default_value() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.RecordSpec.default_value)
  if (!_internal_has_default_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return default_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordSpec::set_allocated_default_value(std::string* default_value) {
  if (default_value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  default_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.RecordSpec.default_value)
}

// -------------------------------------------------------------------

// StyleSpec

// repeated .speech.sparrowhawk.RecordSpec record_spec = 1;
inline int StyleSpec::_internal_record_spec_size() const {
  return record_spec_.size();
}
inline int StyleSpec::record_spec_size() const {
  return _internal_record_spec_size();
}
inline void StyleSpec::clear_record_spec() {
  record_spec_.Clear();
}
inline ::speech::sparrowhawk::RecordSpec* StyleSpec::mutable_record_spec(int index) {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.StyleSpec.record_spec)
  return record_spec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::RecordSpec >*
StyleSpec::mutable_record_spec() {
  // @@protoc_insertion_point(field_mutable_list:speech.sparrowhawk.StyleSpec.record_spec)
  return &record_spec_;
}
inline const ::speech::sparrowhawk::RecordSpec& StyleSpec::_internal_record_spec(int index) const {
  return record_spec_.Get(index);
}
inline const ::speech::sparrowhawk::RecordSpec& StyleSpec::record_spec(int index) const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.StyleSpec.record_spec)
  return _internal_record_spec(index);
}
inline ::speech::sparrowhawk::RecordSpec* StyleSpec::_internal_add_record_spec() {
  return record_spec_.Add();
}
inline ::speech::sparrowhawk::RecordSpec* StyleSpec::add_record_spec() {
  // @@protoc_insertion_point(field_add:speech.sparrowhawk.StyleSpec.record_spec)
  return _internal_add_record_spec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::RecordSpec >&
StyleSpec::record_spec() const {
  // @@protoc_insertion_point(field_list:speech.sparrowhawk.StyleSpec.record_spec)
  return record_spec_;
}

// repeated string required_fields = 2;
inline int StyleSpec::_internal_required_fields_size() const {
  return required_fields_.size();
}
inline int StyleSpec::required_fields_size() const {
  return _internal_required_fields_size();
}
inline void StyleSpec::clear_required_fields() {
  required_fields_.Clear();
}
inline std::string* StyleSpec::add_required_fields() {
  // @@protoc_insertion_point(field_add_mutable:speech.sparrowhawk.StyleSpec.required_fields)
  return _internal_add_required_fields();
}
inline const std::string& StyleSpec::_internal_required_fields(int index) const {
  return required_fields_.Get(index);
}
inline const std::string& StyleSpec::required_fields(int index) const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.StyleSpec.required_fields)
  return _internal_required_fields(index);
}
inline std::string* StyleSpec::mutable_required_fields(int index) {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.StyleSpec.required_fields)
  return required_fields_.Mutable(index);
}
inline void StyleSpec::set_required_fields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.StyleSpec.required_fields)
  required_fields_.Mutable(index)->assign(value);
}
inline void StyleSpec::set_required_fields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.StyleSpec.required_fields)
  required_fields_.Mutable(index)->assign(std::move(value));
}
inline void StyleSpec::set_required_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  required_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.StyleSpec.required_fields)
}
inline void StyleSpec::set_required_fields(int index, const char* value, size_t size) {
  required_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.StyleSpec.required_fields)
}
inline std::string* StyleSpec::_internal_add_required_fields() {
  return required_fields_.Add();
}
inline void StyleSpec::add_required_fields(const std::string& value) {
  required_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speech.sparrowhawk.StyleSpec.required_fields)
}
inline void StyleSpec::add_required_fields(std::string&& value) {
  required_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:speech.sparrowhawk.StyleSpec.required_fields)
}
inline void StyleSpec::add_required_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  required_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speech.sparrowhawk.StyleSpec.required_fields)
}
inline void StyleSpec::add_required_fields(const char* value, size_t size) {
  required_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speech.sparrowhawk.StyleSpec.required_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StyleSpec::required_fields() const {
  // @@protoc_insertion_point(field_list:speech.sparrowhawk.StyleSpec.required_fields)
  return required_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StyleSpec::mutable_required_fields() {
  // @@protoc_insertion_point(field_mutable_list:speech.sparrowhawk.StyleSpec.required_fields)
  return &required_fields_;
}

// repeated string prohibited_fields = 3;
inline int StyleSpec::_internal_prohibited_fields_size() const {
  return prohibited_fields_.size();
}
inline int StyleSpec::prohibited_fields_size() const {
  return _internal_prohibited_fields_size();
}
inline void StyleSpec::clear_prohibited_fields() {
  prohibited_fields_.Clear();
}
inline std::string* StyleSpec::add_prohibited_fields() {
  // @@protoc_insertion_point(field_add_mutable:speech.sparrowhawk.StyleSpec.prohibited_fields)
  return _internal_add_prohibited_fields();
}
inline const std::string& StyleSpec::_internal_prohibited_fields(int index) const {
  return prohibited_fields_.Get(index);
}
inline const std::string& StyleSpec::prohibited_fields(int index) const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.StyleSpec.prohibited_fields)
  return _internal_prohibited_fields(index);
}
inline std::string* StyleSpec::mutable_prohibited_fields(int index) {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.StyleSpec.prohibited_fields)
  return prohibited_fields_.Mutable(index);
}
inline void StyleSpec::set_prohibited_fields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.StyleSpec.prohibited_fields)
  prohibited_fields_.Mutable(index)->assign(value);
}
inline void StyleSpec::set_prohibited_fields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.StyleSpec.prohibited_fields)
  prohibited_fields_.Mutable(index)->assign(std::move(value));
}
inline void StyleSpec::set_prohibited_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  prohibited_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.StyleSpec.prohibited_fields)
}
inline void StyleSpec::set_prohibited_fields(int index, const char* value, size_t size) {
  prohibited_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.StyleSpec.prohibited_fields)
}
inline std::string* StyleSpec::_internal_add_prohibited_fields() {
  return prohibited_fields_.Add();
}
inline void StyleSpec::add_prohibited_fields(const std::string& value) {
  prohibited_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speech.sparrowhawk.StyleSpec.prohibited_fields)
}
inline void StyleSpec::add_prohibited_fields(std::string&& value) {
  prohibited_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:speech.sparrowhawk.StyleSpec.prohibited_fields)
}
inline void StyleSpec::add_prohibited_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  prohibited_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speech.sparrowhawk.StyleSpec.prohibited_fields)
}
inline void StyleSpec::add_prohibited_fields(const char* value, size_t size) {
  prohibited_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speech.sparrowhawk.StyleSpec.prohibited_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StyleSpec::prohibited_fields() const {
  // @@protoc_insertion_point(field_list:speech.sparrowhawk.StyleSpec.prohibited_fields)
  return prohibited_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StyleSpec::mutable_prohibited_fields() {
  // @@protoc_insertion_point(field_mutable_list:speech.sparrowhawk.StyleSpec.prohibited_fields)
  return &prohibited_fields_;
}

// -------------------------------------------------------------------

// ClassSpec

// optional string semiotic_class = 1;
inline bool ClassSpec::_internal_has_semiotic_class() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClassSpec::has_semiotic_class() const {
  return _internal_has_semiotic_class();
}
inline void ClassSpec::clear_semiotic_class() {
  semiotic_class_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClassSpec::semiotic_class() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.ClassSpec.semiotic_class)
  return _internal_semiotic_class();
}
inline void ClassSpec::set_semiotic_class(const std::string& value) {
  _internal_set_semiotic_class(value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.ClassSpec.semiotic_class)
}
inline std::string* ClassSpec::mutable_semiotic_class() {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.ClassSpec.semiotic_class)
  return _internal_mutable_semiotic_class();
}
inline const std::string& ClassSpec::_internal_semiotic_class() const {
  return semiotic_class_.Get();
}
inline void ClassSpec::_internal_set_semiotic_class(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  semiotic_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClassSpec::set_semiotic_class(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  semiotic_class_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.ClassSpec.semiotic_class)
}
inline void ClassSpec::set_semiotic_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  semiotic_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.ClassSpec.semiotic_class)
}
inline void ClassSpec::set_semiotic_class(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  semiotic_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.ClassSpec.semiotic_class)
}
inline std::string* ClassSpec::_internal_mutable_semiotic_class() {
  _has_bits_[0] |= 0x00000001u;
  return semiotic_class_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClassSpec::release_semiotic_class() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.ClassSpec.semiotic_class)
  if (!_internal_has_semiotic_class()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return semiotic_class_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClassSpec::set_allocated_semiotic_class(std::string* semiotic_class) {
  if (semiotic_class != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  semiotic_class_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), semiotic_class,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.ClassSpec.semiotic_class)
}

// repeated .speech.sparrowhawk.StyleSpec style_spec = 2;
inline int ClassSpec::_internal_style_spec_size() const {
  return style_spec_.size();
}
inline int ClassSpec::style_spec_size() const {
  return _internal_style_spec_size();
}
inline void ClassSpec::clear_style_spec() {
  style_spec_.Clear();
}
inline ::speech::sparrowhawk::StyleSpec* ClassSpec::mutable_style_spec(int index) {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.ClassSpec.style_spec)
  return style_spec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::StyleSpec >*
ClassSpec::mutable_style_spec() {
  // @@protoc_insertion_point(field_mutable_list:speech.sparrowhawk.ClassSpec.style_spec)
  return &style_spec_;
}
inline const ::speech::sparrowhawk::StyleSpec& ClassSpec::_internal_style_spec(int index) const {
  return style_spec_.Get(index);
}
inline const ::speech::sparrowhawk::StyleSpec& ClassSpec::style_spec(int index) const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.ClassSpec.style_spec)
  return _internal_style_spec(index);
}
inline ::speech::sparrowhawk::StyleSpec* ClassSpec::_internal_add_style_spec() {
  return style_spec_.Add();
}
inline ::speech::sparrowhawk::StyleSpec* ClassSpec::add_style_spec() {
  // @@protoc_insertion_point(field_add:speech.sparrowhawk.ClassSpec.style_spec)
  return _internal_add_style_spec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::StyleSpec >&
ClassSpec::style_spec() const {
  // @@protoc_insertion_point(field_list:speech.sparrowhawk.ClassSpec.style_spec)
  return style_spec_;
}

// -------------------------------------------------------------------

// SerializeSpec

// repeated .speech.sparrowhawk.ClassSpec class_spec = 1;
inline int SerializeSpec::_internal_class_spec_size() const {
  return class_spec_.size();
}
inline int SerializeSpec::class_spec_size() const {
  return _internal_class_spec_size();
}
inline void SerializeSpec::clear_class_spec() {
  class_spec_.Clear();
}
inline ::speech::sparrowhawk::ClassSpec* SerializeSpec::mutable_class_spec(int index) {
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.SerializeSpec.class_spec)
  return class_spec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::ClassSpec >*
SerializeSpec::mutable_class_spec() {
  // @@protoc_insertion_point(field_mutable_list:speech.sparrowhawk.SerializeSpec.class_spec)
  return &class_spec_;
}
inline const ::speech::sparrowhawk::ClassSpec& SerializeSpec::_internal_class_spec(int index) const {
  return class_spec_.Get(index);
}
inline const ::speech::sparrowhawk::ClassSpec& SerializeSpec::class_spec(int index) const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.SerializeSpec.class_spec)
  return _internal_class_spec(index);
}
inline ::speech::sparrowhawk::ClassSpec* SerializeSpec::_internal_add_class_spec() {
  return class_spec_.Add();
}
inline ::speech::sparrowhawk::ClassSpec* SerializeSpec::add_class_spec() {
  // @@protoc_insertion_point(field_add:speech.sparrowhawk.SerializeSpec.class_spec)
  return _internal_add_class_spec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::speech::sparrowhawk::ClassSpec >&
SerializeSpec::class_spec() const {
  // @@protoc_insertion_point(field_list:speech.sparrowhawk.SerializeSpec.class_spec)
  return class_spec_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sparrowhawk
}  // namespace speech

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_serialization_5fspec_2eproto
